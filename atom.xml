<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>江流的个人博客</title>
  <icon>https://www.gravatar.com/avatar/13672193897b3dfe5bec9baac0db5740</icon>
  <subtitle>一名落魄的Java程序员</subtitle>
  <link href="https://jiangliujl.github.io/atom.xml" rel="self"/>
  
  <link href="https://jiangliujl.github.io/"/>
  <updated>2022-07-28T14:33:26.886Z</updated>
  <id>https://jiangliujl.github.io/</id>
  
  <author>
    <name>JiangLiu</name>
    <email>1794952398@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《雪花算法的Java实现》</title>
    <link href="https://jiangliujl.github.io/2022/07/28/%E9%9B%AA%E8%8A%B1%E7%AE%97%E6%B3%95%E7%9A%84Java%E5%AE%9E%E7%8E%B0%EF%BC%88%E5%BE%85%E5%AE%8C%E6%88%90%EF%BC%89/"/>
    <id>https://jiangliujl.github.io/2022/07/28/%E9%9B%AA%E8%8A%B1%E7%AE%97%E6%B3%95%E7%9A%84Java%E5%AE%9E%E7%8E%B0%EF%BC%88%E5%BE%85%E5%AE%8C%E6%88%90%EF%BC%89/</id>
    <published>2022-07-27T16:00:00.000Z</published>
    <updated>2022-07-28T14:33:26.886Z</updated>
    
    <content type="html"><![CDATA[<p>等有空再写</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;等有空再写&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="Java" scheme="https://jiangliujl.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>《RabbitMQ学习笔记》——读书笔记</title>
    <link href="https://jiangliujl.github.io/2022/07/27/RabbitMQ%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://jiangliujl.github.io/2022/07/27/RabbitMQ%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2022-07-26T16:00:00.000Z</published>
    <updated>2022-07-27T04:43:52.047Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是MQ"><a href="#什么是MQ" class="headerlink" title="什么是MQ"></a>什么是MQ</h1><p>MQ是<code>Message Queue</code>的简称，就是一个消息队列，队列嘛，FIFO先进先出，与普通队列的区别就是，MQ中存放的是消息，并且它是一种跨进程的通信机制，用于上下游传递消息，能够实现上下游之间的解耦</p><h1 id="MQ在SpringBoot中的配置"><a href="#MQ在SpringBoot中的配置" class="headerlink" title="MQ在SpringBoot中的配置"></a>MQ在SpringBoot中的配置</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">rabbitmq:</span></span><br><span class="line"><span class="attr">host:</span> <span class="string">//</span> <span class="string">rabbitmq的地址</span></span><br><span class="line"><span class="attr">port:</span> <span class="string">//</span> <span class="string">mq的端口</span></span><br><span class="line"><span class="attr">username:</span> <span class="string">//</span> <span class="string">mq的用户名</span></span><br><span class="line"><span class="attr">password:</span> <span class="string">//</span> <span class="string">mq的密码</span></span><br><span class="line"><span class="attr">virtual-host:</span> <span class="string">//</span> <span class="string">虚拟消息服务器</span></span><br><span class="line"><span class="attr">publisher-confirms:</span> <span class="string">//</span> <span class="string">是否开启发送确认</span></span><br><span class="line"><span class="attr">publisher-returns:</span> <span class="string">//</span> <span class="string">是否开启发送失败退回</span></span><br><span class="line"><span class="attr">template:</span></span><br><span class="line"><span class="attr">mandatory:</span> <span class="string">//</span> <span class="string">生产者是否启用强制消息</span></span><br><span class="line"><span class="attr">retry:</span></span><br><span class="line"><span class="attr">enable:</span> <span class="string">//</span> <span class="string">生产者是否开启重启</span></span><br><span class="line"><span class="attr">listener:</span></span><br><span class="line"><span class="attr">acknowledge-mode:</span> <span class="string">//</span> <span class="string">消费者ack模式</span></span><br><span class="line"><span class="attr">retry:</span></span><br><span class="line"><span class="attr">enable:</span> <span class="string">//</span> <span class="string">消费者是否重试</span></span><br><span class="line"><span class="attr">max-attempts:</span> <span class="string">//</span> <span class="string">消费者重试次数</span></span><br></pre></td></tr></table></figure><h2 id="配置详解"><a href="#配置详解" class="headerlink" title="配置详解"></a>配置详解</h2><h3 id="virtual-host"><a href="#virtual-host" class="headerlink" title="virtual-host"></a>virtual-host</h3><p><code>virtualHost</code>虚拟消息服务器，每个virtualHost相当于一个独立的MQ服务器，每个VirtualHost之间消息是隔离的，exchange、queue、message不能互通</p><h3 id="publisher-confirms"><a href="#publisher-confirms" class="headerlink" title="publisher-confirms"></a>publisher-confirms</h3><p>这个配置是为了在MQ和生产者之间的消息能够可靠传输，是MQ的扩展</p><p>生产者推送消息到消息队列后，会触发两个回调函数<code>ConfirmCallback</code>和<code>ReturnCallback</code>，从消息推送的结果来看，一共有四种组合：</p><ul><li>消息推送到server，但是在server里找不到交换机</li><li>消息推送到server，找到了交换机但是找不到队列</li><li>消息推送到server了，交换机和队列都没找到</li><li>消息推送成功</li></ul><p>生产者和消费者确认详见后文</p><h1 id="生产者和消费者确认"><a href="#生产者和消费者确认" class="headerlink" title="生产者和消费者确认"></a>生产者和消费者确认</h1><p>由于MQ的传输协议方法无法确认生产者和消费者是否成功发布或者消费信息，所以生产者和消费者都需要一种传递和处理确认的机制</p><h2 id="消费者确认"><a href="#消费者确认" class="headerlink" title="消费者确认"></a>消费者确认</h2><h3 id="自动ACK"><a href="#自动ACK" class="headerlink" title="自动ACK"></a>自动ACK</h3><p>在MQ中有一种自动确认模式机制，消息发送成功后立即被视为传递成功，这种模式以更高的吞吐量来降低交付和消费者处理的安全性为代价，如果消费者的TCP连接或通道在消息发送成功之前关闭，那么消息就会丢失，所以这种方法被视为是不安全的。</p><p>在这个模式中，当方法没有异常执行完毕后，会对MQ发出ACK，若方法出现异常，会对MQ发出nack，消息重回队列。</p><h3 id="手动ACK"><a href="#手动ACK" class="headerlink" title="手动ACK"></a>手动ACK</h3><p>常用API：</p><ul><li>channel.basicAck(msg.getMessageProperties().getDeliveryTag(), false/true)<ul><li>消息确认，第一个参数是队列名称，第二个参数是multiple<ul><li>multiple：是否一次性ack所有deleveryTag的消息</li></ul></li></ul></li><li>channel.basicReject(deleveryTag, requeue)<ul><li>拒绝消息<ul><li>requeue：bool类型，false表示将这条消息丢弃，true表示消息重回队列</li></ul></li></ul></li><li>channel.basicNack(deliveryTag, multiple, requeue)<ul><li>拒绝消息<ul><li>deliveryTag：队列名称</li><li>multiple：是否拒绝deliveryTag的所有消息</li><li>requeue：是否返回队列</li></ul></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;什么是MQ&quot;&gt;&lt;a href=&quot;#什么是MQ&quot; class=&quot;headerlink&quot; title=&quot;什么是MQ&quot;&gt;&lt;/a&gt;什么是MQ&lt;/h1&gt;&lt;p&gt;MQ是&lt;code&gt;Message Queue&lt;/code&gt;的简称，就是一个消息队列，队列嘛，FIFO先进先出，与普通</summary>
      
    
    
    
    
    <category term="读书笔记" scheme="https://jiangliujl.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    <category term="SpringBoot" scheme="https://jiangliujl.github.io/tags/SpringBoot/"/>
    
    <category term="RabbitMQ" scheme="https://jiangliujl.github.io/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>《Java流中的generate与iterator》——读书笔记</title>
    <link href="https://jiangliujl.github.io/2022/07/26/stream%E4%B8%AD%E7%9A%84generate%E4%B8%8Eiterator/"/>
    <id>https://jiangliujl.github.io/2022/07/26/stream%E4%B8%AD%E7%9A%84generate%E4%B8%8Eiterator/</id>
    <published>2022-07-25T16:00:00.000Z</published>
    <updated>2022-07-26T14:54:20.632Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java流中的generate与iterator"><a href="#Java流中的generate与iterator" class="headerlink" title="Java流中的generate与iterator"></a>Java流中的generate与iterator</h1><p>在Java流中，有两个创建无限流的方法：</p><ul><li>stream().generate()</li><li>stream().iterator()</li></ul><h2 id="iterator"><a href="#iterator" class="headerlink" title="iterator"></a>iterator</h2><p>从源码中给的解释来看</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Returns an infinite sequential ordered Stream produced by iterative application of a function f to an initial element seed, producing a Stream consisting of seed, f(seed), f(f(seed)), etc.</span><br><span class="line">The first element (position 0) in the Stream will be the provided seed. For n &gt; 0, the element at position n, will be the result of applying the function f to the element at position n - 1.</span><br><span class="line">The action of applying f for one element happens-before the action of applying f for subsequent elements. For any given element the action may be performed in whatever thread the library chooses.</span><br><span class="line">形参:</span><br><span class="line">seed – the initial element f – a function to be applied to the previous element to produce a new element</span><br><span class="line">返回值:</span><br><span class="line">a new sequential Stream</span><br></pre></td></tr></table></figure><p>iterator创建的无限流是根据<code>seed</code>与<code>initial element seed</code>来创建的，简单来说就是一个起始元素seed，一个创建的规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;BigInteger&gt; stream = Stream.iterate(BigInteger.ZERO, n -&gt; n.add(BigInteger.ONE)).limit(<span class="number">10</span>);</span><br><span class="line">        System.out.println(Arrays.toString(stream.filter(n -&gt; n.compareTo(<span class="keyword">new</span> BigInteger(String.valueOf(<span class="number">1794952398L</span>))) &lt; <span class="number">0</span>).toArray()));</span><br></pre></td></tr></table></figure><p>这里用limit来限制一下产生的无限流，否则无法正常输出</p><h2 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h2><p>同样还是来看源码中给的解释</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Returns an infinite sequential unordered stream where each element is generated by the provided Supplier. This is suitable for generating constant streams, streams of random elements, etc.</span><br><span class="line">形参:</span><br><span class="line">s – the Supplier of generated elements</span><br><span class="line">返回值:</span><br><span class="line">a new infinite sequential unordered Stream</span><br></pre></td></tr></table></figure><p>对于generate来说，只提供给我们一个参数<code>Supplier</code>，翻译过来叫 供应商，里面存放着产生供应流的规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;Integer&gt; stream1 = Stream.generate(<span class="keyword">new</span> Supplier&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Integer <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> a++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).limit(<span class="number">20</span>);</span><br><span class="line">        System.out.println(Arrays.toString(stream1.toArray()));</span><br></pre></td></tr></table></figure><p>这里同样用limit限制一下</p><p>至于具体的使用场景，后续会继续更新</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java流中的generate与iterator&quot;&gt;&lt;a href=&quot;#Java流中的generate与iterator&quot; class=&quot;headerlink&quot; title=&quot;Java流中的generate与iterator&quot;&gt;&lt;/a&gt;Java流中的generat</summary>
      
    
    
    
    
    <category term="Java" scheme="https://jiangliujl.github.io/tags/Java/"/>
    
    <category term="Java流" scheme="https://jiangliujl.github.io/tags/Java%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>《MyBatis 和 MyBatis Plus冲突问题》——解决模块</title>
    <link href="https://jiangliujl.github.io/2022/07/25/mybatisplus%E5%92%8Cmybatis%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98/"/>
    <id>https://jiangliujl.github.io/2022/07/25/mybatisplus%E5%92%8Cmybatis%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98/</id>
    <published>2022-07-24T16:00:00.000Z</published>
    <updated>2022-07-25T04:45:02.722Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>在工作的时候，遇到了一个奇怪的问题，使用 MyBatis Plus 的IService模板中的list对数据库进行操作时，报了个<code>Invalid bound statement (not found)</code></p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>搜了半天，主要是以下几个问题：</p><ul><li>xml 的 namespace 不正确</li><li>Mapper.java 中的方法在 Mapper.xml 中不存在</li><li>xml 返回类型配置错误</li><li>没有构建成功</li></ul><p>但是这些问题都检查了，没问题，用 Maven Helper 查看了一下依赖冲突，看到项目中同时引入了mybatis和mybatisplus，具体冲突的包有三个：</p><ul><li>mapper-spring-boot-starter</li><li>mybatis-spring-boot-starter</li><li>mybatis-plus-extension</li></ul><p>首先，<code>mybatis-spring-boot-starter</code>包是用来连接mybatis和springboot的中间件，这个 mybatis-plus-boot-starter能够代替，冲突了，去掉</p><p>然后是 <code>mapper-spring-boot-starter</code>包，这个包是用来导入公共mapper模板的，具体作用暂时不知道，但是不去掉也不能运行</p><p>最后是<code>mybatis-plus-extension</code>，这个东西具体作用没查到，只知道他是mybatisplus的扩展插件，但是去掉之后service层的函数全都无法调用了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;p&gt;在工作的时候，遇到了一个奇怪的问题，使用 MyBatis Plus 的IService模板中的list对数据库进行操作时，报了个&lt;code&gt;</summary>
      
    
    
    
    
    <category term="MyBatis Plus" scheme="https://jiangliujl.github.io/tags/MyBatis-Plus/"/>
    
    <category term="SpringBoot" scheme="https://jiangliujl.github.io/tags/SpringBoot/"/>
    
    <category term="问题解决" scheme="https://jiangliujl.github.io/tags/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    
  </entry>
  
  <entry>
    <title>《Java常用注解》</title>
    <link href="https://jiangliujl.github.io/2022/07/15/java%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/"/>
    <id>https://jiangliujl.github.io/2022/07/15/java%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/</id>
    <published>2022-07-14T16:00:00.000Z</published>
    <updated>2022-07-24T08:18:35.379Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PostConstruct"><a href="#PostConstruct" class="headerlink" title="@PostConstruct"></a>@PostConstruct</h1><p>从Java EE 5 之后，Servlet增加了两个影响Servlet生命周期的注解：</p><ul><li>@PostConstruct</li><li>@PreConstruct</li></ul><h2 id="PostConstruct-1"><a href="#PostConstruct-1" class="headerlink" title="@PostConstruct"></a>@PostConstruct</h2><p>被这个注解修饰的方法会在服务器加载Servlet的时候运行，并且只会被服务器调用一次，被PostConstruct修饰的方法会在构造函数之后，init之前运行</p><h2 id="PreConstruct"><a href="#PreConstruct" class="headerlink" title="@PreConstruct"></a>@PreConstruct</h2><p>被这个注解修饰的方法会在服务器卸载Servlet的时候运行，并且只会调用一次，类似于destroy</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;PostConstruct&quot;&gt;&lt;a href=&quot;#PostConstruct&quot; class=&quot;headerlink&quot; title=&quot;@PostConstruct&quot;&gt;&lt;/a&gt;@PostConstruct&lt;/h1&gt;&lt;p&gt;从Java EE 5 之后，Servlet增加了</summary>
      
    
    
    
    
    <category term="Java" scheme="https://jiangliujl.github.io/tags/Java/"/>
    
    <category term="注解" scheme="https://jiangliujl.github.io/tags/%E6%B3%A8%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>《lambda表达式的语法》——读书笔记</title>
    <link href="https://jiangliujl.github.io/2022/07/15/lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://jiangliujl.github.io/2022/07/15/lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2022-07-14T16:00:00.000Z</published>
    <updated>2022-07-24T08:15:27.345Z</updated>
    
    <content type="html"><![CDATA[<h1 id="lambda表达式的语法"><a href="#lambda表达式的语法" class="headerlink" title="lambda表达式的语法"></a>lambda表达式的语法</h1><p>了解过javax.swing.Timer函数和Comparator比较器的可以发现，这两个例子有一些共同点，都是将某一段代码块传到某个对象，如果可以直接传入一段代码块，那代码会变得非常简洁，但是Java并不支持这种方法，因为这会让Java语言变得一团糟</p><p>在 java 8 后，加入了lambda表达式，这是一个可传递的代码块,可以让某个接口不写实现类而直接使用</p><p>new Timer中需要传入一个ActionListener接口，实际上只是调用这个接口中的actionPerformed函数，Comparator也是同理</p><p>案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">lambdaTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] a = <span class="keyword">new</span> String[]&#123; <span class="string">&quot;Mercury&quot;</span> , <span class="string">&quot;Venus&quot;</span> , <span class="string">&quot;Earth&quot;</span> , <span class="string">&quot;Mars&quot;</span> ,</span><br><span class="line">                <span class="string">&quot;Jupiter&quot;</span> , <span class="string">&quot;Saturn&quot;</span> , <span class="string">&quot;Uranus&quot;</span> , <span class="string">&quot;Neptune&quot;</span>&#125;;</span><br><span class="line">        Arrays.sort(a, (left, right) -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> left.length() - right.length();</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(a);</span><br><span class="line"></span><br><span class="line">        Timer t = <span class="keyword">new</span> Timer(<span class="number">100</span>, event -&gt;&#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> Date());</span><br><span class="line">        &#125;);</span><br><span class="line">        t.start();</span><br><span class="line">        JOptionPane.showMessageDialog(<span class="keyword">null</span>, <span class="string">&quot;Quit&quot;</span>);</span><br><span class="line">        System.exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h1><p>Java中已经有了很多封装代码块地接口，如AactionListener、Comparator，lambda与这些接口是兼容的</p><p>对于只有一个抽象方法的接口，需要用到这种接口的对象时，可以使用lambda表达式，这种接口成为函数式接口</p><ul><li>为什么Comparator接口也能成为函数式接口，明明有compare、equals两个抽象函数<ul><li>对于接口重写Object的公共方法是不算入函数式接口中的，也就是说Comparator只有compare一个非公共抽象函数</li></ul></li></ul><p>以Arrays.sort为例，在底层，sort方法会接收Comparator的某个类的对象，在这个对象上再调用compare方法执行lambda表达式的方法体。</p><p>lambda表达式可以转换成接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Timer t = <span class="keyword">new</span> Timer(<span class="number">100</span>, event -&gt;&#123;</span><br><span class="line">    System.out.println(<span class="keyword">new</span> Date());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>与原来的写法相比，这个可读性要高得多</p><p>实际上在Java中 lambda 表达式的作用非常有限，也只能转换为函数式接口，在其他语言中，可以声明函数类型、声明这些类型的变量，还可以使用变量保存函数表达式。</p><h1 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h1><p>有时候我们希望可已经有现成的方法可以完成你想要传递到其他代码的某个动作，比如希望定时器事件打印这个事件对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Timer t = <span class="keyword">new</span> Timer(<span class="number">1000</span>, event -&gt; System.out.println(event)):</span><br></pre></td></tr></table></figure><p>但是入股哟能直接把print方法传递到Timer构造器就更简洁了，lambda</p><p>表达式也能够做到</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Timer t = <span class="keyword">new</span> Timer(<span class="number">100</span>, System.out::println);</span><br></pre></td></tr></table></figure><p><img src="/img/image-20220720173122252.png" alt="image-20220720173122252"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;lambda表达式的语法&quot;&gt;&lt;a href=&quot;#lambda表达式的语法&quot; class=&quot;headerlink&quot; title=&quot;lambda表达式的语法&quot;&gt;&lt;/a&gt;lambda表达式的语法&lt;/h1&gt;&lt;p&gt;了解过javax.swing.Timer函数和Compara</summary>
      
    
    
    
    
    <category term="Java" scheme="https://jiangliujl.github.io/tags/Java/"/>
    
    <category term="读书笔记" scheme="https://jiangliujl.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>《MybatisPlus 常用注解》</title>
    <link href="https://jiangliujl.github.io/2022/07/15/mybatisplus%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/"/>
    <id>https://jiangliujl.github.io/2022/07/15/mybatisplus%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/</id>
    <published>2022-07-14T16:00:00.000Z</published>
    <updated>2022-07-24T08:18:49.322Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TableName"><a href="#TableName" class="headerlink" title="@TableName"></a>@TableName</h1><p>用法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableName(&quot;sys_user&quot;)</span></span><br></pre></td></tr></table></figure><p>描述：表名注解，标识实体类对应表</p><p>使用位置：实体类类注解</p><p>属性：</p><ul><li>value：表名</li><li>schema：用来指定模式名称，如果使用的是mysql，则指定数据库名称，如果使用oracle，则为schema</li><li>keepGlobalPrefix：是否保持使用全局的tablePrefix的值</li><li>resultMap：xml中resultMap的id</li><li>autoResultMap：是否自动构建ResultMap</li><li>excludeProperty：需要排除的属性名</li></ul><h1 id="TableId"><a href="#TableId" class="headerlink" title="@TableId"></a>@TableId</h1><p>用法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableName(&quot;sys_user&quot;)</span></span><br></pre></td></tr></table></figure><p> 描述：主键属性</p><p>使用位置：实体类主键字段</p><p>属性：</p><ul><li>value：主键字段名</li><li>type：指定主键类型</li></ul><h2 id="Type属性值"><a href="#Type属性值" class="headerlink" title="Type属性值"></a>Type属性值</h2><ul><li>AUTO：数据库ID自增</li><li>NONE：无状态，未设置主键类型（跟随全局，全局默认为INPUT）</li><li>INPUT：insert前自行设置</li><li>ASSIGN_ID：分配ID，使用接口<code>IdentifierGenerator</code>的<code>nextId</code>，实现类默认为雪花算法</li><li>ASSIGN_UUID：分配UUID</li></ul><h2 id="TableField"><a href="#TableField" class="headerlink" title="@TableField"></a>@TableField</h2><p>用法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableName(&quot;sys_user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="meta">@TableField(&quot;nickname&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>描述：字段注解（非主键）</p><p>属性：</p><ul><li>value：数据库字段名</li><li>exist：是否为数据库字段</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;TableName&quot;&gt;&lt;a href=&quot;#TableName&quot; class=&quot;headerlink&quot; title=&quot;@TableName&quot;&gt;&lt;/a&gt;@TableName&lt;/h1&gt;&lt;p&gt;用法&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;t</summary>
      
    
    
    
    
    <category term="注解" scheme="https://jiangliujl.github.io/tags/%E6%B3%A8%E8%A7%A3/"/>
    
    <category term="Mybatis Plus" scheme="https://jiangliujl.github.io/tags/Mybatis-Plus/"/>
    
  </entry>
  
  <entry>
    <title>《事务传播行为》</title>
    <link href="https://jiangliujl.github.io/2022/07/15/%E4%BA%8B%E5%8A%A1%E4%BC%A0%E6%92%AD%E8%A1%8C%E4%B8%BA/"/>
    <id>https://jiangliujl.github.io/2022/07/15/%E4%BA%8B%E5%8A%A1%E4%BC%A0%E6%92%AD%E8%A1%8C%E4%B8%BA/</id>
    <published>2022-07-14T16:00:00.000Z</published>
    <updated>2022-07-24T08:43:36.116Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是事务传播行为"><a href="#什么是事务传播行为" class="headerlink" title="什么是事务传播行为"></a>什么是事务传播行为</h1><p>我们在Spring中使用事务时，经常会在一个事务中调用另外一个事务，这种事务嵌套的控制方式就是事务传播行为</p><h1 id="事务传播行为的七种方式"><a href="#事务传播行为的七种方式" class="headerlink" title="事务传播行为的七种方式"></a>事务传播行为的七种方式</h1><ul><li>propagation_required<ul><li>事务传播的默认形式，如果当前没有事务，就新建一个事务，如果已经存在事务，就加入到这个事务中</li></ul></li><li>propagation_supports<ul><li>支持当前事务，如果当前没有事务，就以非事务方式执行</li></ul></li><li>propagation_mandatory<ul><li>使用当前事务，如果当前没有事务，就抛出异常</li></ul></li><li>propagation_requires_new<ul><li>新建事务，如果当前存在事务，就把当前事务挂起</li></ul></li><li>propagation_not_supported<ul><li>以非事务方式执行操作，如果当前存在事务，就把当前事务挂起</li></ul></li><li>propagation_never<ul><li>以非事务方式执行，如果当前存在事务，就抛出异常</li></ul></li><li>propagation_nested<ul><li>如果当前存在事务，则在嵌套事务内执行，如果当前没有事务，则执行propagation_required类似的操作</li></ul></li></ul><p>总结</p><p>如果事务嵌套，子事务回滚，如果子事务没有将父事务挂起，父事务也会回滚，不管父事务中是否有对子事务进行异常捕获</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;什么是事务传播行为&quot;&gt;&lt;a href=&quot;#什么是事务传播行为&quot; class=&quot;headerlink&quot; title=&quot;什么是事务传播行为&quot;&gt;&lt;/a&gt;什么是事务传播行为&lt;/h1&gt;&lt;p&gt;我们在Spring中使用事务时，经常会在一个事务中调用另外一个事务，这种事务嵌套的控</summary>
      
    
    
    
    
    <category term="SpringBoot" scheme="https://jiangliujl.github.io/tags/SpringBoot/"/>
    
    <category term="事务" scheme="https://jiangliujl.github.io/tags/%E4%BA%8B%E5%8A%A1/"/>
    
    <category term="MySQL" scheme="https://jiangliujl.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>《事务失效》</title>
    <link href="https://jiangliujl.github.io/2022/07/15/%E4%BA%8B%E5%8A%A1%E5%A4%B1%E6%95%88%E7%9A%84%E5%87%A0%E7%A7%8D%E6%83%85%E5%86%B5%E4%B8%8E%E5%8E%9F%E5%9B%A0/"/>
    <id>https://jiangliujl.github.io/2022/07/15/%E4%BA%8B%E5%8A%A1%E5%A4%B1%E6%95%88%E7%9A%84%E5%87%A0%E7%A7%8D%E6%83%85%E5%86%B5%E4%B8%8E%E5%8E%9F%E5%9B%A0/</id>
    <published>2022-07-14T16:00:00.000Z</published>
    <updated>2022-07-24T08:47:07.815Z</updated>
    
    <content type="html"><![CDATA[<h1 id="事务失效的几种情况与原因"><a href="#事务失效的几种情况与原因" class="headerlink" title="事务失效的几种情况与原因"></a>事务失效的几种情况与原因</h1><ul><li>service没有托管给spring</li><li>抛出受检异常</li><li>业务自己捕获了异常</li><li>切面顺序导致</li><li>非public方法</li><li>父子容器</li><li>方法被final修饰</li><li>方法被static修饰</li><li>调用本类方法</li><li>多线程调用</li><li>错误的传播行为</li><li>使用了不支持事务的存储引擎</li><li>数据源没有配置事务管理器</li><li>被代理的类过早实例化</li></ul><h2 id="service没有托管给spring"><a href="#service没有托管给spring" class="headerlink" title="service没有托管给spring"></a>service没有托管给spring</h2><p>事务的前提是service必须是一个bean对象</p><h2 id="抛出受检异常"><a href="#抛出受检异常" class="headerlink" title="抛出受检异常"></a>抛出受检异常</h2><p>spring默认回滚的是runtimeException，如果要触发其他异常的回滚，可以通过rollbackFor进行配置</p><h2 id="业务自己捕获了异常"><a href="#业务自己捕获了异常" class="headerlink" title="业务自己捕获了异常"></a>业务自己捕获了异常</h2><p>spring只有捕捉到了业务抛出的异常时，才会进行后续处理，如果业务自己捕获了异常并进行处理，事务无法感知</p><h2 id="切面顺序导致"><a href="#切面顺序导致" class="headerlink" title="切面顺序导致"></a>切面顺序导致</h2><p><img src="/img/image-20220713172742115.png" alt="image-20220713172742115"></p><p>因为spring事务本质上也是一个切面，自定义切面捕捉到了异常但是没有往外抛出，事务切面捕获不到异常</p><h2 id="非public方法"><a href="#非public方法" class="headerlink" title="非public方法"></a>非public方法</h2><p>spring事务默认生效的方法权限都必须为public</p><p>解决办法：</p><ul><li>修改方法为public</li><li>修改TransactionAttributeSource，将publicMethodsOnly修改为false</li><li>开启AspectJ代理</li></ul><h2 id="父子容器"><a href="#父子容器" class="headerlink" title="父子容器"></a>父子容器</h2><p>原因：子容器扫描范围过大，将未加事务配置的service扫描进来</p><p>这个一般用于spring整合springmvc中，springboot没有父子容器</p><h2 id="方法用final修饰"><a href="#方法用final修饰" class="headerlink" title="方法用final修饰"></a>方法用final修饰</h2><p>spring事务是用动态代理实现的，如果方法使用了final修饰，代理类无法对目标类进行重写，就无法实现事务</p><h2 id="方法用static修饰"><a href="#方法用static修饰" class="headerlink" title="方法用static修饰"></a>方法用static修饰</h2><p>原因和final一样</p><h2 id="调用本类方法"><a href="#调用本类方法" class="headerlink" title="调用本类方法"></a>调用本类方法</h2><p>调用本类方法不经过代理，就无法进行增强</p><h2 id="多线程调用"><a href="#多线程调用" class="headerlink" title="多线程调用"></a>多线程调用</h2><p>原因：spring的事务是通过数据库连接来实现的，而数据库连接spring是放在threadLocal里面的，同一个事务只能用同一个数据库连接。而多线程场景下，拿到的数据库连接不同，即属于不同事务</p><h2 id="错误的传播行为"><a href="#错误的传播行为" class="headerlink" title="错误的传播行为"></a>错误的传播行为</h2><p>详情看  事务传播行为</p><h2 id="使用了不支持事务的存储引擎"><a href="#使用了不支持事务的存储引擎" class="headerlink" title="使用了不支持事务的存储引擎"></a>使用了不支持事务的存储引擎</h2><p>比如mysql中的MyISAM就不支持事务</p><h2 id="数据源没有配置事务管理器"><a href="#数据源没有配置事务管理器" class="headerlink" title="数据源没有配置事务管理器"></a>数据源没有配置事务管理器</h2><p>springboot中默认开启事务管理器</p><h2 id="被代理的类被过早实例化"><a href="#被代理的类被过早实例化" class="headerlink" title="被代理的类被过早实例化"></a>被代理的类被过早实例化</h2><p>具体应该要看源码</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;事务失效的几种情况与原因&quot;&gt;&lt;a href=&quot;#事务失效的几种情况与原因&quot; class=&quot;headerlink&quot; title=&quot;事务失效的几种情况与原因&quot;&gt;&lt;/a&gt;事务失效的几种情况与原因&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;service没有托管给spring&lt;/li&gt;
</summary>
      
    
    
    
    
    <category term="SpringBoot" scheme="https://jiangliujl.github.io/tags/SpringBoot/"/>
    
    <category term="事务" scheme="https://jiangliujl.github.io/tags/%E4%BA%8B%E5%8A%A1/"/>
    
    <category term="MySQL" scheme="https://jiangliujl.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>《常用类与接口》</title>
    <link href="https://jiangliujl.github.io/2022/07/15/%E5%B8%B8%E7%94%A8%E7%B1%BB%E4%B8%8E%E6%8E%A5%E5%8F%A3/"/>
    <id>https://jiangliujl.github.io/2022/07/15/%E5%B8%B8%E7%94%A8%E7%B1%BB%E4%B8%8E%E6%8E%A5%E5%8F%A3/</id>
    <published>2022-07-14T16:00:00.000Z</published>
    <updated>2022-07-24T08:46:35.502Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Comparator接口"><a href="#Comparator接口" class="headerlink" title="Comparator接口"></a>Comparator接口</h1><p>遇到的问题：在开发中需要对一个含有实体类的泛型数组进行排序</p><p>comparator接口可以实现这个功能</p><p>简单用法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Collections_</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        list.add(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;smith&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;king&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;king&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;king&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;milan&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Collections.sort(list, <span class="keyword">new</span> Comparator() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Object o1, Object o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (o1 <span class="keyword">instanceof</span> String &amp;&amp; o2 <span class="keyword">instanceof</span> String)&#123;</span><br><span class="line">                    <span class="keyword">return</span> (((String) o1).length() - ((String) o2).length());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Cloneable接口"><a href="#Cloneable接口" class="headerlink" title="Cloneable接口"></a>Cloneable接口</h1><p>克隆接口，这个接口中提供了一个安全的clone方法</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Comparator接口&quot;&gt;&lt;a href=&quot;#Comparator接口&quot; class=&quot;headerlink&quot; title=&quot;Comparator接口&quot;&gt;&lt;/a&gt;Comparator接口&lt;/h1&gt;&lt;p&gt;遇到的问题：在开发中需要对一个含有实体类的泛型数组进行排序&lt;</summary>
      
    
    
    
    
    <category term="Java" scheme="https://jiangliujl.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>《原子类》</title>
    <link href="https://jiangliujl.github.io/2022/07/15/LongAdder%E5%92%8CAutomicLong%E7%9A%84%EF%BC%88%E5%BE%85%E5%AE%8C%E6%88%90%EF%BC%89/"/>
    <id>https://jiangliujl.github.io/2022/07/15/LongAdder%E5%92%8CAutomicLong%E7%9A%84%EF%BC%88%E5%BE%85%E5%AE%8C%E6%88%90%EF%BC%89/</id>
    <published>2022-07-14T16:00:00.000Z</published>
    <updated>2022-07-29T06:40:02.683Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LongAdder和AtomicLong"><a href="#LongAdder和AtomicLong" class="headerlink" title="LongAdder和AtomicLong"></a>LongAdder和AtomicLong</h1><p>要讲清楚这个，首先我们需要了解，什么是CAS机制</p><h2 id="CAS机制"><a href="#CAS机制" class="headerlink" title="CAS机制"></a>CAS机制</h2><p>首先来看这样一段代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++)&#123;</span><br><span class="line">                        temp++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        System.out.println(temp);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这段代码的结果，temp不一定是20，因为这段代码是<strong>非线程安全</strong>的，然后我们再加上synchronized锁，再次尝试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 原子类.引入;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> JiangLiu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/7/28 22:37:49</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++)&#123;</span><br><span class="line">                        <span class="keyword">synchronized</span> (main.class)&#123;</span><br><span class="line">                            temp++;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        System.out.println(temp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候我们会发现，temp的值就会是20了，但是在大多数情况下，这并不是最优选择，原因很简单，性能问题：</p><ul><li>synchronized会让没有得到锁资源的进程进入BLOCKED状态，而拿到资源后会进入RUNNABLE状态，状态的切换涉及到操作系统用户模式和内核模式的转换，代价较高</li></ul><p>面对这种情况，我们可以使用原子类来进行操作</p><ul><li>原子类：就是java.util.concurrent.atomic包下一系列以Atomic开头的包装类。</li></ul><p>这里我们以AtomicLong为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 原子类.引入;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicLong;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> JiangLiu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/7/28 22:37:49</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AtomicLong temp = <span class="keyword">new</span> AtomicLong();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">100</span>; j++)&#123;</span><br><span class="line">                        <span class="keyword">synchronized</span> (main.class)&#123;</span><br><span class="line">                            temp.incrementAndGet();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        System.out.println(temp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果我们可以看到，使用原子类之后，同样可以保证结果正确，并且在大多数情况下，性能要比synchronized更好，而原子类的底层就是使用到了CAS机制。</p><p>CAS，英文叫做Compare and set，比较和更新，下面我们来介绍CAS机制的原理</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>在CAS机制中，有三个基本操作数，分别是V,A,B</p><ul><li>V：内存地址</li><li>A：旧的预期值</li><li>B：新的预期值</li></ul><p>预期值：就是程序预测地址V上的值应该是什么，如果V上的值和A相同，那么B替换V上的值，如果V上的值不符合旧的预期值，那么就要重新获取V上的当前值，并且重新计算要修改的值，这个过程我们成为自旋。</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>CAS机制的缺点：</p><ul><li>CPU开销过大<ul><li>如果有多个线程竞争资源，却又一直更新失败，会给CPU带来很大压力</li></ul></li><li>不能保证代码块的原子性<ul><li>原子类只能保证一个变量的原子操作，如果想要三个原子类同时更新，就必须使用synchronized</li></ul></li><li>ABA问题<ul><li>后面会进行详细介绍，这是CAS机制最大的问题</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;LongAdder和AtomicLong&quot;&gt;&lt;a href=&quot;#LongAdder和AtomicLong&quot; class=&quot;headerlink&quot; title=&quot;LongAdder和AtomicLong&quot;&gt;&lt;/a&gt;LongAdder和AtomicLong&lt;/h1&gt;&lt;</summary>
      
    
    
    
    
    <category term="Java" scheme="https://jiangliujl.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>《SpringBoot常用注解》</title>
    <link href="https://jiangliujl.github.io/2022/07/15/SpringBoot%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/"/>
    <id>https://jiangliujl.github.io/2022/07/15/SpringBoot%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/</id>
    <published>2022-07-14T16:00:00.000Z</published>
    <updated>2022-07-27T06:38:50.854Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Springboot常用注解"><a href="#Springboot常用注解" class="headerlink" title="Springboot常用注解"></a>Springboot常用注解</h1><ul><li>Value：属性赋值</li><li>Component：与业务层、dao层、控制层不相关的类需要在spring容器中创建使用</li><li>Mapper：注解当前类为mapper类</li><li>MapperScan：如果想要每个接口都变成实现类，那么需要在每个接口上添加Mapper注解，比较麻烦，可以使用MapperScan进行扫描</li><li>Service：表示当前层为Service层</li><li>Controller：控制层对象的创建</li><li>RestController：Controller与ResponseBody的结合，让当前类下web请求返回数据而不是视图</li><li>Autowired：根据类型自动注入</li><li>Resouce：根据名称自动注入</li></ul><h2 id="SpringBootApplication注解"><a href="#SpringBootApplication注解" class="headerlink" title="@SpringBootApplication注解"></a>@SpringBootApplication注解</h2><p>这个注解包含了三个注解，分别是：</p><p>@SpringBootConfiguration：自动扫描添加了@Configuration注解的类，读取其中的配置信息</p><p>@EnableAutoConfiguration：开启自动配置告诉Springboot基于所添加的依赖去猜测你想要如何配置spring，比如说我们引入了spring-boot-starter-web，而这个启动器中帮我们添加了tomcat、SpringMVC的依赖，此时自动配置就只要你是要开发一个web应用，就会帮我们去完成web以及springMVC的默认配置。</p><p>@ComponentScan：配置组件扫描</p><h2 id="Transaction"><a href="#Transaction" class="headerlink" title="@Transaction"></a>@Transaction</h2><p>事务注解</p><h3 id="失效场景"><a href="#失效场景" class="headerlink" title="失效场景"></a>失效场景</h3><p>具体看我的另一篇博客——《事务失效》</p><h2 id="EnableScheduling"><a href="#EnableScheduling" class="headerlink" title="@EnableScheduling"></a>@EnableScheduling</h2><p>开启定时任务，配合@Schedule注解使用，使这个注解功能可用</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Springboot常用注解&quot;&gt;&lt;a href=&quot;#Springboot常用注解&quot; class=&quot;headerlink&quot; title=&quot;Springboot常用注解&quot;&gt;&lt;/a&gt;Springboot常用注解&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Value：属性赋值&lt;/li&gt;
</summary>
      
    
    
    
    
    <category term="注解" scheme="https://jiangliujl.github.io/tags/%E6%B3%A8%E8%A7%A3/"/>
    
    <category term="SpringBoot" scheme="https://jiangliujl.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>《Timer定时器》——源码阅读</title>
    <link href="https://jiangliujl.github.io/2022/07/15/Timer%E5%AE%9A%E6%97%B6%E5%99%A8%EF%BC%88%E5%BE%85%E5%AE%8C%E6%88%90%EF%BC%89/"/>
    <id>https://jiangliujl.github.io/2022/07/15/Timer%E5%AE%9A%E6%97%B6%E5%99%A8%EF%BC%88%E5%BE%85%E5%AE%8C%E6%88%90%EF%BC%89/</id>
    <published>2022-07-14T16:00:00.000Z</published>
    <updated>2022-07-24T08:22:51.673Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Timer"><a href="#Timer" class="headerlink" title="Timer"></a>Timer</h1><p>简单来说，Timer就像是一个闹钟，给定时器安排一个任务，约定这个任务在xxx时间后执行，可以执行一次或多次</p><p>TimerTask是一个抽象类，它的子类代表一个可以被Timer计划的任务</p><p>Timer一共有三个：</p><ul><li>javax.swing.Timer</li><li>java.util.Timer</li><li>javax.management.Timer</li></ul><p>java.util.Timer是最常用的</p><h2 id="java-util-Timer"><a href="#java-util-Timer" class="headerlink" title="java.util.Timer"></a>java.util.Timer</h2><p>在源码中，对Timer的介绍是这样的</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">A facility for threads to schedule tasks for future execution in a background thread. Tasks may be scheduled for one-time execution, or for repeated execution at regular intervals.</span><br><span class="line">Corresponding to each Timer object is a single background thread that is used to execute all of the timer&#x27;s tasks, sequentially. Timer tasks should complete quickly. If a timer task takes excessive time to complete, it &quot;hogs&quot; the timer&#x27;s task execution thread. This can, in turn, delay the execution of subsequent tasks, which may &quot;bunch up&quot; and execute in rapid succession when (and if) the offending task finally completes.</span><br><span class="line">After the last live reference to a Timer object goes away and all outstanding tasks have completed execution, the timer&#x27;s task execution thread terminates gracefully (and becomes subject to garbage collection). However, this can take arbitrarily long to occur. By default, the task execution thread does not run as a daemon thread, so it is capable of keeping an application from terminating. If a caller wants to terminate a timer&#x27;s task execution thread rapidly, the caller should invoke the timer&#x27;s cancel method.</span><br><span class="line">If the timer&#x27;s task execution thread terminates unexpectedly, for example, because its stop method is invoked, any further attempt to schedule a task on the timer will result in an IllegalStateException, as if the timer&#x27;s cancel method had been invoked.</span><br><span class="line">This class is thread-safe: multiple threads can share a single Timer object without the need for external synchronization.</span><br><span class="line">This class does not offer real-time guarantees: it schedules tasks using the Object.wait(long) method.</span><br><span class="line">Java 5.0 introduced the java.util.concurrent package and one of the concurrency utilities therein is the ScheduledThreadPoolExecutor which is a thread pool for repeatedly executing tasks at a given rate or delay. It is effectively a more versatile replacement for the Timer/TimerTask combination, as it allows multiple service threads, accepts various time units, and doesn&#x27;t require subclassing TimerTask (just implement Runnable). Configuring ScheduledThreadPoolExecutor with one thread makes it equivalent to Timer.</span><br><span class="line">Implementation note: This class scales to large numbers of concurrently scheduled tasks (thousands should present no problem). Internally, it uses a binary heap to represent its task queue, so the cost to schedule a task is O(log n), where n is the number of concurrently scheduled tasks.</span><br><span class="line">Implementation note: All constructors start a timer thread.</span><br></pre></td></tr></table></figure><p>首先，Timer是为了以后在后台线程中执行任务的工具，任务可以执行一次或多次</p><p>Timer中的所有任务都在一个线程中，用于按顺序执行所有定时器的任务，定时器任务应该设置为很快完成，否则它将占用其他任务的时间，相反也有好处，可以延后后续任务的执行。</p><p>在一个Timer对象的最后一个引用消失并且所有任务都已完成后，Timer的线程会成为垃圾回收的对象。默认情况下，任务执行线程不作为守护线程。因此它能够防止应用程序终止</p><p>如果定时器的任务线程意外终止。例如，调用了它的stop方法，那么任何进一步尝试在计时器上安排任务都将导致IllegalStateException，就如同调用了计时器的取消方法一样</p><p>Timer这个类是线程安全的，多个线程可以共享一个Timer对象</p><p>在 java 5.0 以后，Java引入了java.util.concurrent包，其中ScheduledThreadPoolExecutor是一个并发实用程序，它实际上是一个线程池，用于以给定的速率或延迟重复执行任务。它实际上是Timer/TimerTask组合的更通用替代品</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Timer&quot;&gt;&lt;a href=&quot;#Timer&quot; class=&quot;headerlink&quot; title=&quot;Timer&quot;&gt;&lt;/a&gt;Timer&lt;/h1&gt;&lt;p&gt;简单来说，Timer就像是一个闹钟，给定时器安排一个任务，约定这个任务在xxx时间后执行，可以执行一次或多次&lt;/p&gt;</summary>
      
    
    
    
    
    <category term="源码阅读" scheme="https://jiangliujl.github.io/tags/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    
    <category term="Java" scheme="https://jiangliujl.github.io/tags/Java/"/>
    
  </entry>
  
</feed>
