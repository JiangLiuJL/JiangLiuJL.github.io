<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>江流的个人博客</title>
  <icon>https://www.gravatar.com/avatar/13672193897b3dfe5bec9baac0db5740</icon>
  <subtitle>一名落魄的Java程序员</subtitle>
  <link href="https://jiangliujl.github.io/atom.xml" rel="self"/>
  
  <link href="https://jiangliujl.github.io/"/>
  <updated>2022-08-10T14:41:36.814Z</updated>
  <id>https://jiangliujl.github.io/</id>
  
  <author>
    <name>JiangLiu</name>
    <email>1794952398@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《Java流操作》——读书笔记</title>
    <link href="https://jiangliujl.github.io/2022/08/10/Java%E6%B5%81%E6%93%8D%E4%BD%9C/"/>
    <id>https://jiangliujl.github.io/2022/08/10/Java%E6%B5%81%E6%93%8D%E4%BD%9C/</id>
    <published>2022-08-09T16:00:00.000Z</published>
    <updated>2022-08-10T14:41:36.814Z</updated>
    
    <content type="html"><![CDATA[<h1 id="从迭代到流的操作"><a href="#从迭代到流的操作" class="headerlink" title="从迭代到流的操作"></a>从迭代到流的操作</h1><p>处理集合时，我们常常会遍历他们的元素，然后对其中的元素做一些操作，例如我们如果想从一个文件中读取一个字符串，然后用非字母对他们进行分割，我们一般会这么干</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String contents = Files.readString(Paths.get(<span class="string">&quot;D:/001_program/JavaProgram/JavaBase/src/main/java/核心技术卷II/JavaSe8的流库/从迭代到流的操作/alice.txt&quot;</span>));</span><br><span class="line"><span class="comment">// 非字母分隔符</span></span><br><span class="line">List&lt;String&gt; words = Arrays.asList(contents.split(<span class="string">&quot;\\PL+&quot;</span>));</span><br><span class="line">System.out.println(words);</span><br><span class="line"><span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">    System.out.println(word);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，我们可以尝试用流的操作替代循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">        String contents = Files.readString(Paths.get(<span class="string">&quot;D:/001_program/JavaProgram/JavaBase/src/main/java/核心技术卷II/JavaSe8的流库/从迭代到流的操作/alice.txt&quot;</span>));</span><br><span class="line">        <span class="comment">// 非字母分隔符</span></span><br><span class="line">        List&lt;String&gt; words = Arrays.asList(contents.split(<span class="string">&quot;\\PL+&quot;</span>));</span><br><span class="line">        System.out.println(words);</span><br><span class="line"><span class="comment">//        for (String word : words) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(word);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="keyword">long</span> count1 = words.stream().filter(Objects::nonNull).count();</span><br><span class="line">        System.out.println(count1);</span><br></pre></td></tr></table></figure><p>就像这样，这比循环更加简洁</p><h2 id="stream和parallelStream"><a href="#stream和parallelStream" class="headerlink" title="stream和parallelStream"></a>stream和parallelStream</h2><p>在Java中，这两种都是流操作，但是它们两个有一些区别</p><ul><li>stream是串行流，也就是说stream流中的元素是一个一个顺序执行的</li><li>而parallelStream是并行流，可以以并行方式来进行过滤和计数</li></ul><p>至于并行流，在后面会详细介绍</p><p>流操作表面上和集合是非常相似的，但是它们有着非常显著的差异：</p><ul><li>流操作并不存储元素。这些元素储存在底层的集合中按需生成。</li><li>流操作并不会修改数据源，而是产生一个新的流</li><li>流的操作是尽可能惰性执行的。比如我们想要查找前五个长单词而不是所有长单词，那么流就会在匹配到第五个长单词时停止过滤，因此按理说我们可以操作无限流。</li></ul><h2 id="章节总结"><a href="#章节总结" class="headerlink" title="章节总结"></a>章节总结</h2><p>流操作API：</p><ul><li>filter(Predicate&lt;? super T&gt; P)：产生一个流，其中包含所有满足P的元素</li><li>count()：计算当前流中元素的数量</li></ul><p>流的种类：</p><ul><li>stream：串行流</li><li>parallelStream：并行流</li></ul><h1 id="流的创建"><a href="#流的创建" class="headerlink" title="流的创建"></a>流的创建</h1><p>我们已经知道用Collection类的stream方法可以将一个集合转化为流，当然，不止集合，数组也可以</p><p>对于一个数组，我们可以使用Stream.of方法将数组转变为流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>&#125;;</span><br><span class="line">Stream&lt;<span class="keyword">int</span>[]&gt; a1 = Stream.of(a);</span><br></pre></td></tr></table></figure><p>of方法用的是可变参数，所以我们可以传入任意长度的数组</p><p>但是更加推荐Array.stream(array, from, to)方法，可以从数组的from到to创建一个流对象</p><p>如果想产生一个空的流，可以使用<code>Stream.empty()</code>方法</p><h2 id="为什么推荐Array-stream"><a href="#为什么推荐Array-stream" class="headerlink" title="为什么推荐Array.stream"></a>为什么推荐Array.stream</h2><p>对于对象类型的数组，Array.stream和Stream.of虽然有同样的返回，但是对于基本类型的数组，Stream.of.count返回的数组永远是1</p><p>对于这点可以自行验证。</p><h2 id="无限流"><a href="#无限流" class="headerlink" title="无限流"></a>无限流</h2><p>在Java8的流库中，有两个创建无限流的方法，generate和iterator</p><p>详细可以从另一篇博客《Java流中的generate与iterator》了解</p><h3 id="iterator"><a href="#iterator" class="headerlink" title="iterator"></a>iterator</h3><p>iterator需要我们传入两个参数，<code>seed</code>和<code>initial element seed</code>，一个是初始值，一个是产生无限流的依据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;BigInteger&gt; stream = Stream.iterate(BigInteger.ZERO, n -&gt; n.add(BigInteger.TEN)).limit(<span class="number">100</span>);</span><br><span class="line">System.out.println(Arrays.toString(stream.filter(n -&gt; n.compareTo(<span class="keyword">new</span> BigInteger(String.valueOf(<span class="number">170L</span>))) &lt; <span class="number">0</span>).toArray()));</span><br></pre></td></tr></table></figure><h3 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h3><p>generate则需要我们传入一个Supplier对象，里面可以定义规则，比iterator更加灵活</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;Integer&gt; stream1 = Stream.generate(<span class="keyword">new</span> Supplier&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Integer <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> a++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).limit(<span class="number">20</span>);</span><br><span class="line">        System.out.println(Arrays.toString(stream1.toArray()));</span><br></pre></td></tr></table></figure><p>或者说，generate可以根据多个元素制定规则，而iterator只能根据一个元素</p><p>在Java中，产生流的方式还有很多，比如Pattern.splitStream()、Files.lines()</p><p>Pattern.splitStream可以根据正则表达式来分割字符串形成一个流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Pattern.complie(<span class="string">&quot;\\PL+&quot;</span>).splitAsStream(content)</span><br></pre></td></tr></table></figure><p>而Files.lines(path)方法则可以返回一个包含文件中所有行的流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>(Stream&lt;String&gt; lines = Files.lines(path))&#123;</span><br><span class="line">    <span class="comment">// Process line</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="章节总结-1"><a href="#章节总结-1" class="headerlink" title="章节总结"></a>章节总结</h2><p>操作流API：</p><ul><li>of(T… values)：根据给定数组产生一个流</li><li>empty()：产生一个空的流</li><li>generate()：产生一个无限流</li><li>iterator()：产生一个无限流</li></ul><p>java.util.Arrays：</p><ul><li>stream(T[] Arrays, int start, int end)：根据数组创建一个流</li></ul><p>java.util.regex.Pattern：</p><ul><li>splitAsStream(CharSequence input)：根据input产生一个流</li></ul><p>java.nio.file.Files：</p><ul><li>stream(Path path, [Charset c])：将指定文件中的行转化为流，并且可以设置指定字符集</li></ul><p>java.util.function.Supplier：</p><ul><li>get()：提供一个值，用于产生无限流</li></ul><h1 id="filter、map和flatMap"><a href="#filter、map和flatMap" class="headerlink" title="filter、map和flatMap"></a>filter、map和flatMap</h1><h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h2><p>filter可以从一个流中转换出一个流，其中的元素遵循某种规则，可以在<code>filter()</code>括号中定义这个规则，比如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; words = ...;</span><br><span class="line">Stream&lt;String&gt; longWords = wordList.stream().filter(w -&gt; w.length &gt; <span class="number">12</span>)</span><br></pre></td></tr></table></figure><p>这样这个流中就会只包含长度大于12的单词</p><p>filter更像是从一个流中筛选元素，组成另一个流</p><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p>相比于filter，map虽然也是产生一个新的流，但是map是将原来的流中的元素进行转换，比如将words中的单词全部小写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;String&gt; words = wordList.stream().map(String::toLowerCase);</span><br></pre></td></tr></table></figure><p>或者你可以自定义一个函数，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 核心技术卷II.JavaSe8的流库.流方法;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> JiangLiu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/8/10 21:24:52</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">map</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; words = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        words.add(<span class="string">&quot;Abc&quot;</span>);</span><br><span class="line">        words.add(<span class="string">&quot;Bcd&quot;</span>);</span><br><span class="line">        words.add(<span class="string">&quot;Java&quot;</span>);</span><br><span class="line">        words.add(<span class="string">&quot;GoLang&quot;</span>);</span><br><span class="line">        words.add(<span class="string">&quot;Rust&quot;</span>);</span><br><span class="line">        List&lt;String&gt; collect = words.stream().map(String::toLowerCase).collect(Collectors.toList());</span><br><span class="line">        System.out.println(collect);</span><br><span class="line"></span><br><span class="line">        List&lt;List&lt;String&gt;&gt; collect1 = words.stream().map(w -&gt; myMap(w).collect(Collectors.toList())).collect(Collectors.toList());</span><br><span class="line">        System.out.println(collect1);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Stream&lt;String&gt; <span class="title">myMap</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++)&#123;</span><br><span class="line">            list.add(s.substring(i, i + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list.stream();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">[abc, bcd, java, golang, rust]</span><br><span class="line">[[A, b, c], [B, c, d], [J, a, v, a], [G, o, L, a, n, g], [R, u, s, t]]</span><br></pre></td></tr></table></figure><p>但是这样每个单词都是一个List，我们可能并不想出现这种情况，这时候flatMap方法就派上用场了</p><h2 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap"></a>flatMap</h2><p>flatMap可以将当前流中的所有元素拼接到一起返回</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; collect2 = words.stream().flatMap(w -&gt; myMap(w)).collect(Collectors.toList());</span><br><span class="line">        System.out.println(collect2);</span><br><span class="line">[A, b, c, B, c, d, J, a, v, a, G, o, L, a, n, g, R, u, s, t]</span><br></pre></td></tr></table></figure><h2 id="章节总结-2"><a href="#章节总结-2" class="headerlink" title="章节总结"></a>章节总结</h2><p>java.util.Stream：</p><ul><li>filter：产生一个流，其中包含当前流中所有满足条件的元素</li><li>map(Function&lt;? super T&gt; mapper)：产生一个流，其中包含将mapper应用于流中的每一个元素所产生的结果</li><li>flatMap(Function mapper)：产生一个流，其中包含将mapper应用于流中每一个元素所产生的结果的组合</li></ul><h1 id="抽取子流和连接流"><a href="#抽取子流和连接流" class="headerlink" title="抽取子流和连接流"></a>抽取子流和连接流</h1><h2 id="抽取流"><a href="#抽取流" class="headerlink" title="抽取流"></a>抽取流</h2><p>在介绍无限流的时候，有一个API叫<code>limit()</code>，这个API会产生一个新的流，并且在流运行到第n个元素时结束，对裁剪无限流非常好用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Double&gt; collect = Stream.generate(Math::random).limit(<span class="number">5</span>).collect(Collectors.toList());</span><br><span class="line">System.out.println(collect);</span><br></pre></td></tr></table></figure><p>这个流就只包含五个随机数</p><p>而<code>stream.skip(long n)</code>API正好相反，这个API会在跳过前n个元素，对后面的元素进行截取。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; words = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        words.add(<span class="string">&quot;Abc&quot;</span>);</span><br><span class="line">        words.add(<span class="string">&quot;Bcd&quot;</span>);</span><br><span class="line">        words.add(<span class="string">&quot;Java&quot;</span>);</span><br><span class="line">        words.add(<span class="string">&quot;GoLang&quot;</span>);</span><br><span class="line">        words.add(<span class="string">&quot;Rust&quot;</span>);</span><br><span class="line">        List&lt;String&gt; collect1 = words.stream().skip(<span class="number">2</span>).collect(Collectors.toList());</span><br><span class="line">        System.out.println(collect1);</span><br><span class="line"></span><br><span class="line">[Java, GoLang, Rust]</span><br></pre></td></tr></table></figure><p>返回的流跳过了前两个元素</p><h2 id="连接流"><a href="#连接流" class="headerlink" title="连接流"></a>连接流</h2><p>如果想要将两个Luis连接起来，可以使用<code>stream.contact(Stream a, Stream b)</code>将两个流进行连接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Object&gt; collect2 = Stream.concat(collect.stream(), collect1.stream()).collect(Collectors.toList());</span><br><span class="line">        System.out.println(collect2);</span><br><span class="line"></span><br><span class="line">[<span class="number">0.19283510014488758</span>, <span class="number">0.986608060762175</span>, <span class="number">0.07406377892420113</span>, <span class="number">0.6737128935974602</span>, <span class="number">0.5210312651857187</span>, Java, GoLang, Rust]</span><br></pre></td></tr></table></figure><h2 id="章节总结-3"><a href="#章节总结-3" class="headerlink" title="章节总结"></a>章节总结</h2><p>本章一共介绍了三个API，两个抽取子流，一个拼接流</p><p>java.util.Stream：</p><ul><li>limit(long maxSize)：抽取流中最初的maxSize个元素，并返回一个新的流</li><li>skip(long n)：抽取流中除了前n个元素之前的元素，并返回一个新的流</li><li>contact(Stream a, Stream b)：拼接两个流，并返回一个新的流</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;从迭代到流的操作&quot;&gt;&lt;a href=&quot;#从迭代到流的操作&quot; class=&quot;headerlink&quot; title=&quot;从迭代到流的操作&quot;&gt;&lt;/a&gt;从迭代到流的操作&lt;/h1&gt;&lt;p&gt;处理集合时，我们常常会遍历他们的元素，然后对其中的元素做一些操作，例如我们如果想从一个文件中</summary>
      
    
    
    
    
    <category term="Java" scheme="https://jiangliujl.github.io/tags/Java/"/>
    
    <category term="Java流" scheme="https://jiangliujl.github.io/tags/Java%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>《Go随机数》——学习笔记</title>
    <link href="https://jiangliujl.github.io/2022/08/09/go%E9%9A%8F%E6%9C%BA%E6%95%B0/"/>
    <id>https://jiangliujl.github.io/2022/08/09/go%E9%9A%8F%E6%9C%BA%E6%95%B0/</id>
    <published>2022-08-08T16:00:00.000Z</published>
    <updated>2022-08-09T13:10:22.638Z</updated>
    
    <content type="html"><![CDATA[<p>在GO语言中，提供了随机数的核心方法<code>rand</code>，但是go的随机数其实并不随机，是一个伪随机数，简单来说就是Go的随机数生成需要依赖种子值，对于相同的种子值产生的随机数顺序是相同的</p><p>为了产生一个随机数，我们需要给rand设置一个不重复种子，最好的选择当然就是时间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rand.Seed(time.Now().UnixNano())</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：Seed接收的是一个int64类型的数字，需要用Unix将time转换成int64类型</p><p>然后就可以使用rand.Intn(max int64)来进行取随机数了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rand.Seed(time.Now().UnixNano())</span><br><span class="line">randomInt := int64(rand.Intn(<span class="number">100</span>))</span><br><span class="line">fmt.Println(randomInt)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在GO语言中，提供了随机数的核心方法&lt;code&gt;rand&lt;/code&gt;，但是go的随机数其实并不随机，是一个伪随机数，简单来说就是Go的随机数生成需要依赖种子值，对于相同的种子值产生的随机数顺序是相同的&lt;/p&gt;
&lt;p&gt;为了产生一个随机数，我们需要给rand设置一个不重复种子</summary>
      
    
    
    
    
    <category term="GoLang" scheme="https://jiangliujl.github.io/tags/GoLang/"/>
    
  </entry>
  
  <entry>
    <title>《ElasticSearch基础》</title>
    <link href="https://jiangliujl.github.io/2022/08/05/ElasticSearch/"/>
    <id>https://jiangliujl.github.io/2022/08/05/ElasticSearch/</id>
    <published>2022-08-04T16:00:00.000Z</published>
    <updated>2022-08-10T14:41:51.813Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础入门"><a href="#基础入门" class="headerlink" title="基础入门"></a>基础入门</h1><h2 id="一些基础概念"><a href="#一些基础概念" class="headerlink" title="一些基础概念"></a>一些基础概念</h2><h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><p>在大多数语言中，实体类可以被序列化为键值对形式的json，通常情况下，我们的<code>对象</code>和<code>文档</code>两个概念是可以相互替换的。</p><h3 id="index和type的区别"><a href="#index和type的区别" class="headerlink" title="index和type的区别"></a>index和type的区别</h3><h4 id="index"><a href="#index" class="headerlink" title="index"></a>index</h4><p>为了将数据添加到ES，我们需要一个索引<code>index</code>，就是一个存储关联数据的地方，实际上，索引是一个用来指定一个或多个分片的”逻辑命名空间”</p><p>注意：索引在磁盘空间、内存使用等方面有一个小而固定的开销，因此一个大的索引比多个小的索引效率更高。</p><h4 id="type"><a href="#type" class="headerlink" title="type"></a>type</h4><p>文档表示的对象类别</p><p>type允许我们在一个索引中存储多种类型的数据，在es中，数据存放在索引中可能是非常混乱的，这时候我们指定一个子分区就非常有用了</p><p>比如：所有的产品放在一个index中，但是这些产品种类繁多，这时我们就可以指定一些子分区type，比如电子产品type、厨房用具type…</p><p>它允许我们在索引中进行逻辑分区</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如果还是不能理解，可以把index理解成一个数据库，而type就是数据库中的表，但是这样有问题，他们两个的数据存储方式不同，以至于这么比较完全没有意义。</span><br></pre></td></tr></table></figure><h2 id="数据输入和输出"><a href="#数据输入和输出" class="headerlink" title="数据输入和输出"></a>数据输入和输出</h2><h3 id="索引文档"><a href="#索引文档" class="headerlink" title="索引文档"></a>索引文档</h3><p>在es中，<code>_index</code>、<code>_type</code>、<code>_id</code>三个字段可以作为一个文档的唯一标识，_id字段我们可以手动生成，也可以让indexAPI自动生成</p><h4 id="使用自定义ID"><a href="#使用自定义ID" class="headerlink" title="使用自定义ID"></a>使用自定义ID</h4><p>格式：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PUT /&#123;index&#125;/&#123;type&#125;/&#123;id&#125;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;field&quot;</span>: <span class="string">&quot;value&quot;</span>,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PUT /website/blog/<span class="number">123</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;My first blog entry&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;text&quot;</span>:  <span class="string">&quot;Just trying this out...&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;date&quot;</span>:  <span class="string">&quot;2014/01/01&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">&quot;_index&quot;</span>:    <span class="string">&quot;website&quot;</span>,</span><br><span class="line">   <span class="attr">&quot;_type&quot;</span>:     <span class="string">&quot;blog&quot;</span>,</span><br><span class="line">   <span class="attr">&quot;_id&quot;</span>:       <span class="string">&quot;123&quot;</span>,</span><br><span class="line">   <span class="attr">&quot;_version&quot;</span>:  <span class="number">1</span>,</span><br><span class="line">   <span class="attr">&quot;created&quot;</span>:   <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应中有两个字段:</p><ul><li>_version：代表当前文档的版本号</li><li>created：是否创建成功</li></ul><p>当然，如果你懒的输入id，或者数据量过大你也不知道ID是多少，也可以让ES帮我们自动生成ID</p><h4 id="自动生成ID"><a href="#自动生成ID" class="headerlink" title="自动生成ID"></a>自动生成ID</h4><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /website/blog/</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;My second blog entry&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;text&quot;</span>:  <span class="string">&quot;Still trying this out...&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;date&quot;</span>:  <span class="string">&quot;2014/01/01&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是id那个字段设置为空</p><p>响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">&quot;_index&quot;</span>:    <span class="string">&quot;website&quot;</span>,</span><br><span class="line">   <span class="attr">&quot;_type&quot;</span>:     <span class="string">&quot;blog&quot;</span>,</span><br><span class="line">   <span class="attr">&quot;_id&quot;</span>:       <span class="string">&quot;AVFgSgVHUP18jI2wRx0w&quot;</span>,</span><br><span class="line">   <span class="attr">&quot;_version&quot;</span>:  <span class="number">1</span>,</span><br><span class="line">   <span class="attr">&quot;created&quot;</span>:   <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个响应中，除了ID是ES自动生成，其他都一样</p><h3 id="取回一个文档"><a href="#取回一个文档" class="headerlink" title="取回一个文档"></a>取回一个文档</h3><p>如果我们想要从ES中取回文档，仍然使用相同的<code>_index</code>、<code>_type</code>、<code>_id</code>就行</p><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /website/blog/<span class="number">123</span>?pretty</span><br></pre></td></tr></table></figure><p>响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;_index&quot;</span> :   <span class="string">&quot;website&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_type&quot;</span> :    <span class="string">&quot;blog&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_id&quot;</span> :      <span class="string">&quot;123&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_version&quot;</span> : <span class="number">1</span>,</span><br><span class="line">  <span class="attr">&quot;found&quot;</span> :    <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;_source&quot;</span> :  &#123;</span><br><span class="line">      <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;My first blog entry&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;text&quot;</span>:  <span class="string">&quot;Just trying this out...&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;date&quot;</span>:  <span class="string">&quot;2014/01/01&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里又出现了一个新的参数：</p><ul><li>found：是否查询到数据</li></ul><p>后面会讲到，在多个文档查询中，文档与文档的查询是相互独立的，如果一个文档没查询到数据，并不会影响到其他文档。</p><h3 id="检查文档是否存在"><a href="#检查文档是否存在" class="headerlink" title="检查文档是否存在"></a>检查文档是否存在</h3><p>如果我们只是想检查某个文档是否存在，而并不关心它的内容是什么，那么可以用HEAD来代替GET方法</p><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -i -XHEAD http:<span class="comment">//localhost:9200/website/blog/123</span></span><br></pre></td></tr></table></figure><ul><li>-i：打印响应头和网页代码</li><li>-X：用指定的请求方式去请求</li></ul><p>如果文档存在：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">Content-Type: text/plain; charset=UTF<span class="number">-8</span></span><br><span class="line">Content-Length: <span class="number">0</span></span><br></pre></td></tr></table></figure><p>如果文档不存在：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HTTP/<span class="number">1.1</span> <span class="number">404</span> Not Found</span><br><span class="line">Content-Type: text/plain; charset=UTF<span class="number">-8</span></span><br><span class="line">Content-Length: <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="更新整个文档"><a href="#更新整个文档" class="headerlink" title="更新整个文档"></a>更新整个文档</h3><p>在es中，文档是不可变的，如果想要修改，就要更新现有文档，需要重建索引或者进行替换。</p><p>这是我们原来的文档</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;_index&quot;</span> :   <span class="string">&quot;website&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_type&quot;</span> :    <span class="string">&quot;blog&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_id&quot;</span> :      <span class="string">&quot;123&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_version&quot;</span> : <span class="number">1</span>,</span><br><span class="line">  <span class="attr">&quot;found&quot;</span> :    <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;_source&quot;</span> :  &#123;</span><br><span class="line">      <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;My first blog entry&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;text&quot;</span>:  <span class="string">&quot;Just trying this out...&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;date&quot;</span>:  <span class="string">&quot;2014/01/01&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们要修改这个文档</p><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PUT /website/blog/<span class="number">123</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;My first blog entry&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;text&quot;</span>:  <span class="string">&quot;I am starting to get the hang of this...&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;date&quot;</span>:  <span class="string">&quot;2014/01/02&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应体：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;_index&quot;</span> :   <span class="string">&quot;website&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_type&quot;</span> :    <span class="string">&quot;blog&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_id&quot;</span> :      <span class="string">&quot;123&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_version&quot;</span> : <span class="number">2</span>,</span><br><span class="line">  <span class="attr">&quot;created&quot;</span>:   <span class="literal">false</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在内部，es会将已经被替换掉的文档标记为已删除，并且增加一个新的文档，但是这个旧的文档并不会马上消失，并且你也不能对旧的文档进行访问，当我们继续索引更多的数据时，es会在后台清理这些已经删除的文档。</p><h3 id="创建一个新的文档"><a href="#创建一个新的文档" class="headerlink" title="创建一个新的文档"></a>创建一个新的文档</h3><p>如果我们想要创建一个新的文档，怎么保证我们正在创建一个全新文档而不是覆盖旧的文档，有三种方案</p><h4 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h4><p>最简单的办法就是让es自动生成id，我们只指定index和type</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">POST /website/blog/</span><br><span class="line">&#123; ... &#125;</span><br></pre></td></tr></table></figure><p>如果你仍然想要指定自己的id，可以参考下面两种方案</p><h4 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h4><p>使用<code>op_type</code>查询字符串参数：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PUT /website/blog/<span class="number">123</span>?op_type=create</span><br></pre></td></tr></table></figure><h4 id="第三种"><a href="#第三种" class="headerlink" title="第三种"></a>第三种</h4><p>在URL末端使用<code>/_create</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PUT /website/blog/<span class="number">123</span>/_create</span><br></pre></td></tr></table></figure><p>如果添加成功，es会返回给我们一个元数据和一个<code>201created</code>的HTTP响应码</p><p>如果添加失败，即已经有相同的文档存在，es会返回给我们一个<code>409 Conflict</code>响应码</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">&quot;error&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;root_cause&quot;</span>: [</span><br><span class="line">         &#123;</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;document_already_exists_exception&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;reason&quot;</span>: <span class="string">&quot;[blog][123]: document already exists&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;shard&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;index&quot;</span>: <span class="string">&quot;website&quot;</span></span><br><span class="line">         &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;document_already_exists_exception&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;reason&quot;</span>: <span class="string">&quot;[blog][123]: document already exists&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;shard&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;index&quot;</span>: <span class="string">&quot;website&quot;</span></span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="attr">&quot;status&quot;</span>: <span class="number">409</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h3><p>删除文档非常简单，就是把请求方法换一换</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE /website/blog/<span class="number">123</span></span><br></pre></td></tr></table></figure><p>如果找到了该文档，es会返回一个<code>200 ok</code>的响应码</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;found&quot;</span> :    <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;_index&quot;</span> :   <span class="string">&quot;website&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_type&quot;</span> :    <span class="string">&quot;blog&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_id&quot;</span> :      <span class="string">&quot;123&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_version&quot;</span> : <span class="number">3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相反，如果没有找到，会得到一个<code>404 Not Found</code>响应码</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;found&quot;</span> :    <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;_index&quot;</span> :   <span class="string">&quot;website&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_type&quot;</span> :    <span class="string">&quot;blog&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_id&quot;</span> :      <span class="string">&quot;123&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_version&quot;</span> : <span class="number">4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果文档不存在，_version的值也会增加</p><h3 id="处理冲突"><a href="#处理冲突" class="headerlink" title="处理冲突"></a>处理冲突</h3><p>好了，这时候我们已经看完了对es文档简单的增删查改</p><p>现在，设想这样一种情况：</p><ul><li>当我们使用API去更新整个ES文档时，这时候有人对这个文档进行了修改，那么他的修改将会丢失</li></ul><p>在某些情况中，这种冲突会变得非常严重，而在数据库领域中，我们一般会有两种方式来确保这种事情不会发生：</p><ul><li>悲观锁</li><li>乐观锁</li></ul><h4 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h4><p>这种方式在数据库中被广泛应用，它假设变更冲突可能发生，于是就阻塞访问资源，以此来防止冲突的发生。</p><p>例子：在读取一行数据之前将数据上锁，确保只有放置所的线程能够对这行数据进行修改</p><h4 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h4><p>ES中使用的正是这种锁，它假设冲突不会发生，所以并不会阻塞操作。</p><p><strong>但是</strong>，如果数据在读写过程中被修改了，更新将会失败。</p><h3 id="乐观并发控制"><a href="#乐观并发控制" class="headerlink" title="乐观并发控制"></a>乐观并发控制</h3><p>在ES底层使用的是CAS机制，详细可以看我的另一篇博客《原子类》，其中有介绍CAS机制的原理。</p><p>在这里做一个简单地介绍：</p><p>在ES中有一个字段<code>_version</code>，用来记录当前文档版本。</p><p>现在创建一个新的文档</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PUT /website/blog/<span class="number">1</span>/_create</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;My first blog entry&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;text&quot;</span>:  <span class="string">&quot;Just trying this out...&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应体会告诉我们，当前创建的这个文档版本号<code>_version</code>为1，现在我们对它做一些修改</p><p>先检索该文档</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /website/blog/<span class="number">1</span></span><br></pre></td></tr></table></figure><p>响应体：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;_index&quot;</span> :   <span class="string">&quot;website&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_type&quot;</span> :    <span class="string">&quot;blog&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_id&quot;</span> :      <span class="string">&quot;1&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_version&quot;</span> : <span class="number">1</span>,</span><br><span class="line">  <span class="attr">&quot;found&quot;</span> :    <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;_source&quot;</span> :  &#123;</span><br><span class="line">      <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;My first blog entry&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;text&quot;</span>:  <span class="string">&quot;Just trying this out...&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更新文档数据</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PUT /website/blog/<span class="number">1</span>?version=<span class="number">1</span> </span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;My first blog entry&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;text&quot;</span>:  <span class="string">&quot;Starting to get the hang of this...&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里带了个version参数，也就是说，只有当前<code>_version</code>为1时，本次更新才能成功</p><p>除此之外，我们还可以通过外部系统使用版本控制</p><h4 id="通过外部系统使用版本控制"><a href="#通过外部系统使用版本控制" class="headerlink" title="通过外部系统使用版本控制"></a>通过外部系统使用版本控制</h4><p>或许我们会把其他数据库作为主要的数据存储，而把ES作为数据检索，这意味着我们需要把主数据库的修改都复制到ES，如果多个进程负责这一数据同步，你可能会遇到类似于之前那样的并发问题。</p><p>如果你的主数据库已经有了版本号或者一个能作为版本号的字段值，那么就可以在ES中通过增加<code>version_type=external</code>到查询字符串的方式重用这些版本号</p><p>注意：版本号需要时大于0的整数，并且小于9.2E+18的一个值</p><p>而ES对于这次版本号的查询也和之前不一样，之前处理版本号时，ES会检查当前<code>_version</code>和请求中指定的版本号是否相同，而这次是检查是否小于指定版本号。</p><p>案例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PUT /website/blog/<span class="number">2</span>?version=<span class="number">5</span>&amp;version_type=external</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;My first external blog entry&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;text&quot;</span>:  <span class="string">&quot;Starting to get the hang of this...&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;_index&quot;</span>:   <span class="string">&quot;website&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_type&quot;</span>:    <span class="string">&quot;blog&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_id&quot;</span>:      <span class="string">&quot;2&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_version&quot;</span>: <span class="number">5</span>,</span><br><span class="line">  <span class="attr">&quot;created&quot;</span>:  <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们再来更新一下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PUT /website/blog/<span class="number">2</span>?version=<span class="number">10</span>&amp;version_type=external</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;My first external blog entry&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;text&quot;</span>:  <span class="string">&quot;This is a piece of cake...&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;_index&quot;</span>:   <span class="string">&quot;website&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_type&quot;</span>:    <span class="string">&quot;blog&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_id&quot;</span>:      <span class="string">&quot;2&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_version&quot;</span>: <span class="number">10</span>,</span><br><span class="line">  <span class="attr">&quot;created&quot;</span>:  <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是如果我们重新运行一遍版本号为10的请求，就会报错</p><h3 id="文档部分更新"><a href="#文档部分更新" class="headerlink" title="文档部分更新"></a>文档部分更新</h3><p>在之前我们已经知道了怎么更新整个文档：</p><ul><li>检索文档</li><li>修改文档</li><li>重新索引整个文档</li></ul><p>使用UPDATE API 我们可以对部分文档进行更新，但是还是需要遵循之前的规则：文档只能被替换，不能修改</p><p>案例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">POST /website/blog/<span class="number">1</span>/_update</span><br><span class="line">&#123;</span><br><span class="line">   <span class="attr">&quot;doc&quot;</span> : &#123;</span><br><span class="line">      <span class="attr">&quot;tags&quot;</span> : [ <span class="string">&quot;testing&quot;</span> ],</span><br><span class="line">      <span class="attr">&quot;views&quot;</span>: <span class="number">0</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果请求成功，我们可以看到</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">&quot;_index&quot;</span> :   <span class="string">&quot;website&quot;</span>,</span><br><span class="line">   <span class="attr">&quot;_id&quot;</span> :      <span class="string">&quot;1&quot;</span>,</span><br><span class="line">   <span class="attr">&quot;_type&quot;</span> :    <span class="string">&quot;blog&quot;</span>,</span><br><span class="line">   <span class="attr">&quot;_version&quot;</span> : <span class="number">3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时如果我们查询该文档</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">&quot;_index&quot;</span>:    <span class="string">&quot;website&quot;</span>,</span><br><span class="line">   <span class="attr">&quot;_type&quot;</span>:     <span class="string">&quot;blog&quot;</span>,</span><br><span class="line">   <span class="attr">&quot;_id&quot;</span>:       <span class="string">&quot;1&quot;</span>,</span><br><span class="line">   <span class="attr">&quot;_version&quot;</span>:  <span class="number">3</span>,</span><br><span class="line">   <span class="attr">&quot;found&quot;</span>:     <span class="literal">true</span>,</span><br><span class="line">   <span class="attr">&quot;_source&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;title&quot;</span>:  <span class="string">&quot;My first blog entry&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;text&quot;</span>:   <span class="string">&quot;Starting to get the hang of this...&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;tags&quot;</span>: [ <span class="string">&quot;testing&quot;</span> ], </span><br><span class="line">      <span class="attr">&quot;views&quot;</span>:  <span class="number">0</span> </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新的字段已经加进去了</p><p>我们也可以使用脚本来更新</p><h4 id="使用脚本更新文档"><a href="#使用脚本更新文档" class="headerlink" title="使用脚本更新文档"></a>使用脚本更新文档</h4><p>脚本可以在UPDATE API中用来改变<code>_source</code>中的字段内容，他在更新脚本中成为<code>ctx._source</code>。</p><p>例如，如果我们想要使用脚本来增加文档中views的数量</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST /website/blog/<span class="number">1</span>/_update</span><br><span class="line">&#123;</span><br><span class="line">   <span class="attr">&quot;script&quot;</span> : <span class="string">&quot;ctx._source.views+=1&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者想给tag中新加一个标签：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">POST /website/blog/<span class="number">1</span>/_update</span><br><span class="line">&#123;</span><br><span class="line">   <span class="attr">&quot;script&quot;</span> : <span class="string">&quot;ctx._source.tags+=new_tag&quot;</span>,</span><br><span class="line">   <span class="attr">&quot;params&quot;</span> : &#123;</span><br><span class="line">      <span class="attr">&quot;new_tag&quot;</span> : <span class="string">&quot;search&quot;</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">&quot;_index&quot;</span>:    <span class="string">&quot;website&quot;</span>,</span><br><span class="line">   <span class="attr">&quot;_type&quot;</span>:     <span class="string">&quot;blog&quot;</span>,</span><br><span class="line">   <span class="attr">&quot;_id&quot;</span>:       <span class="string">&quot;1&quot;</span>,</span><br><span class="line">   <span class="attr">&quot;_version&quot;</span>:  <span class="number">5</span>,</span><br><span class="line">   <span class="attr">&quot;found&quot;</span>:     <span class="literal">true</span>,</span><br><span class="line">   <span class="attr">&quot;_source&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;title&quot;</span>:  <span class="string">&quot;My first blog entry&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;text&quot;</span>:   <span class="string">&quot;Starting to get the hang of this...&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;tags&quot;</span>:  [<span class="string">&quot;testing&quot;</span>, <span class="string">&quot;search&quot;</span>], </span><br><span class="line">      <span class="attr">&quot;views&quot;</span>:  <span class="number">1</span> </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="更新的文档可能上不存在"><a href="#更新的文档可能上不存在" class="headerlink" title="更新的文档可能上不存在"></a>更新的文档可能上不存在</h4><p>提需求了提需求了：现在要在ES里加入一个页面访问量计数器，当有人浏览页面时，对该页面的计数器进行累加，但是有些网页是新网页，你也不知道这个计数器存不存在。</p><p>在这种情况下，我们可以使用<code>upsert</code>参数，如果文档不存在，就先创建它：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">POST /website/pageviews/<span class="number">1</span>/_update</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;script&quot;</span>: <span class="string">&quot;ctx._source.views+=1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;upsert&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;views&quot;</span>:<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="更新和冲突"><a href="#更新和冲突" class="headerlink" title="更新和冲突"></a>更新和冲突</h4><p>乐观锁并不能完全消除冲突的可能性，version改变导致更新失败，遇到这种情况，我们只需要尝试再次更新。</p><p>这可以通过参数<code>retry_on_conflict</code>来自动完成，这个参数规定了失败之前<code>update</code>应该重试的次数，默认值为0</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">POST /website/pageviews/<span class="number">1</span>/_update?retry_on_conflict=<span class="number">5</span> </span><br><span class="line">&#123;</span><br><span class="line">   <span class="attr">&quot;script&quot;</span> : <span class="string">&quot;ctx._source.views+=1&quot;</span>,</span><br><span class="line">   <span class="attr">&quot;upsert&quot;</span>: &#123;</span><br><span class="line">       <span class="attr">&quot;views&quot;</span>: <span class="number">0</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个就表示如果更新失败了至多会重试5次。</p><h3 id="取回多个文档"><a href="#取回多个文档" class="headerlink" title="取回多个文档"></a>取回多个文档</h3><p>ES速度很快，但是还可以更快，我们可以吧多个请求合并成一个，避免单独处理每个请求产生的网络延迟和开销。如果需要检索很多文档，可以使用<code>multiget</code>或者<code>mget</code>API来讲这些请求放再同一个请求中。</p><h4 id="megt"><a href="#megt" class="headerlink" title="megt"></a>megt</h4><p>mgetAPI参数要求：</p><ul><li>docs</li></ul><p>需要有一个docs数组作为参数，其中每个元素都要有检索文档包含的元数据</p><p>例子：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">GET /_mget</span><br><span class="line">&#123;</span><br><span class="line">   <span class="attr">&quot;docs&quot;</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;website&quot;</span>,</span><br><span class="line">         <span class="attr">&quot;_type&quot;</span> :  <span class="string">&quot;blog&quot;</span>,</span><br><span class="line">         <span class="attr">&quot;_id&quot;</span> :    <span class="number">2</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;website&quot;</span>,</span><br><span class="line">         <span class="attr">&quot;_type&quot;</span> :  <span class="string">&quot;pageviews&quot;</span>,</span><br><span class="line">         <span class="attr">&quot;_id&quot;</span> :    <span class="number">1</span>,</span><br><span class="line">         <span class="attr">&quot;_source&quot;</span>: <span class="string">&quot;views&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应体也含有一个docs数组：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">&quot;docs&quot;</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="attr">&quot;_index&quot;</span> :   <span class="string">&quot;website&quot;</span>,</span><br><span class="line">         <span class="attr">&quot;_id&quot;</span> :      <span class="string">&quot;2&quot;</span>,</span><br><span class="line">         <span class="attr">&quot;_type&quot;</span> :    <span class="string">&quot;blog&quot;</span>,</span><br><span class="line">         <span class="attr">&quot;found&quot;</span> :    <span class="literal">true</span>,</span><br><span class="line">         <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">            <span class="attr">&quot;text&quot;</span> :  <span class="string">&quot;This is a piece of cake...&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;title&quot;</span> : <span class="string">&quot;My first external blog entry&quot;</span></span><br><span class="line">         &#125;,</span><br><span class="line">         <span class="attr">&quot;_version&quot;</span> : <span class="number">10</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="attr">&quot;_index&quot;</span> :   <span class="string">&quot;website&quot;</span>,</span><br><span class="line">         <span class="attr">&quot;_id&quot;</span> :      <span class="string">&quot;1&quot;</span>,</span><br><span class="line">         <span class="attr">&quot;_type&quot;</span> :    <span class="string">&quot;pageviews&quot;</span>,</span><br><span class="line">         <span class="attr">&quot;found&quot;</span> :    <span class="literal">true</span>,</span><br><span class="line">         <span class="attr">&quot;_version&quot;</span> : <span class="number">2</span>,</span><br><span class="line">         <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">            <span class="attr">&quot;views&quot;</span> : <span class="number">2</span></span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用mget的另一个姿势</p><p>如果检索的数据都属于同一个<code>index</code>和<code>type</code>，可以将<code>index</code></p><p>和<code>type</code>放在url中，不用重复去写，当然，如果想在这里面访问其他index，也可以写在<code>docs</code>中进行覆盖</p><p>案例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GET /website/blog/_mget</span><br><span class="line">&#123;</span><br><span class="line">   <span class="attr">&quot;docs&quot;</span> : [</span><br><span class="line">      &#123; <span class="attr">&quot;_id&quot;</span> : <span class="number">2</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;pageviews&quot;</span>, <span class="attr">&quot;_id&quot;</span> :   <span class="number">1</span> &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果所有<code>index</code>和<code>type</code>都是相同的，你还可以这么写</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET /website/blog/_mget</span><br><span class="line">&#123;</span><br><span class="line">   <span class="attr">&quot;ids&quot;</span> : [ <span class="string">&quot;2&quot;</span>, <span class="string">&quot;1&quot;</span> ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这甚至不需要写<code>docs</code></p><p>当然，他们之间的查询是相互独立的，一次查询出现的错误并不会影响所有</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;docs&quot;</span> : [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;_index&quot;</span> :   <span class="string">&quot;website&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;_type&quot;</span> :    <span class="string">&quot;blog&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;_id&quot;</span> :      <span class="string">&quot;2&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;_version&quot;</span> : <span class="number">10</span>,</span><br><span class="line">      <span class="attr">&quot;found&quot;</span> :    <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">        <span class="attr">&quot;title&quot;</span>:   <span class="string">&quot;My first external blog entry&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;text&quot;</span>:    <span class="string">&quot;This is a piece of cake...&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;_index&quot;</span> :   <span class="string">&quot;website&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;_type&quot;</span> :    <span class="string">&quot;blog&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;_id&quot;</span> :      <span class="string">&quot;1&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;found&quot;</span> :    <span class="literal">false</span>  </span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代价较小的批量操作"><a href="#代价较小的批量操作" class="headerlink" title="代价较小的批量操作"></a>代价较小的批量操作</h3><p>看完了<code>mget</code>，是不是觉得挺方便，如果不同的请求也能放在同一次操作里执行不就起飞了，ES有一个<code>bulk</code>API专门用来干这事</p><p>来看一看</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123; action: &#123; metadata &#125;&#125;\n</span><br><span class="line">&#123; request body        &#125;\n</span><br><span class="line">&#123; action: &#123; metadata &#125;&#125;\n</span><br><span class="line">&#123; request body        &#125;\n</span><br></pre></td></tr></table></figure><p>注意：每行一定要以<code>\n</code>结尾，<strong>包括最后一行</strong></p><p>为什么要规定这种格式，为什么不能和<code>mget</code>一样将参数包装在一个json数组中：</p><ul><li>为了解释这点我们需要了解一些东西：在批量请求中，每个文档可能属于不同的主分片，可能被分配给集群中的任意节点，这意味着<code>bulk</code>请求中的所有操作都需要被转发到正确节点上的正确分片</li><li>如果请求被包含在json数组中，就意味着我们需要做以下操作<ul><li>将JSON解析为数组（包括数据，可以非常大）</li><li>查看每个请求应该发送到哪个分片</li><li>为每个分片创建一个请求数组</li><li>为这些数字序列化为内部传输格式</li><li>将请求发送到每个分片</li></ul></li><li>这行为虽然可行，但是需要大量内存来存储原本相同的数据的副本，并创建更多的数据结构，JVM需要用更多的时间进行垃圾回收</li><li>相反，ES可以直接读取被网络缓冲区接收的原始数据，它使用换行符来识别和解析每一个小的请求，并进行处理，没有冗余的数据复制，没有浪费的数据结构，整个请求尽可能在最小的内存中处理</li></ul><p>在这里有新的参数<code>action</code>和<code>request body</code></p><p><code>action/metadata</code>参数指定了我们要对哪一个文档做什么操作，并且必须是一下选项之一：</p><ul><li>create：如果文档不存在，就创建它</li><li>index：创建一个新文档或者更新文档</li><li>update：部分更新文档</li><li>delete：删除文档</li></ul><p>并且这个参数应该指定被操作文档的<code>index</code>、<code>id</code>、<code>type</code></p><p>例子：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;delete&quot;</span>: &#123;<span class="attr">&quot;_index&quot;</span>: <span class="string">&quot;website&quot;</span>,<span class="attr">&quot;_type&quot;</span>: <span class="string">&quot;blog&quot;</span>,<span class="attr">&quot;_id&quot;</span>: <span class="string">&quot;123&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p><code>action</code>介绍完了，来介绍一下<code>request body</code></p><p>这个字段包含文档中的数据，是<code>update</code>操作必须的，并且和<code>update</code>API一样，你应该传递<code>doc</code>、<code>upsert</code>、<code>script</code>这些数据</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">&quot;create&quot;</span>:  &#123; <span class="attr">&quot;_index&quot;</span>: <span class="string">&quot;website&quot;</span>, <span class="attr">&quot;_type&quot;</span>: <span class="string">&quot;blog&quot;</span>, <span class="attr">&quot;_id&quot;</span>: <span class="string">&quot;123&quot;</span> &#125;&#125;</span><br><span class="line">&#123; <span class="attr">&quot;title&quot;</span>:    <span class="string">&quot;My first blog post&quot;</span> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">&quot;index&quot;</span>: &#123; <span class="attr">&quot;_index&quot;</span>: <span class="string">&quot;website&quot;</span>, <span class="attr">&quot;_type&quot;</span>: <span class="string">&quot;blog&quot;</span> &#125;&#125;</span><br><span class="line">&#123; <span class="attr">&quot;title&quot;</span>:    <span class="string">&quot;My second blog post&quot;</span> &#125;</span><br></pre></td></tr></table></figure><p>与<code>index</code>API相同，如果你不指定ID，ES会自动生成一个</p><p>完整的<code>bulk</code>请求如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">POST /_bulk</span><br><span class="line">&#123; <span class="attr">&quot;delete&quot;</span>: &#123; <span class="attr">&quot;_index&quot;</span>: <span class="string">&quot;website&quot;</span>, <span class="attr">&quot;_type&quot;</span>: <span class="string">&quot;blog&quot;</span>, <span class="attr">&quot;_id&quot;</span>: <span class="string">&quot;123&quot;</span> &#125;&#125; </span><br><span class="line">&#123; <span class="attr">&quot;create&quot;</span>: &#123; <span class="attr">&quot;_index&quot;</span>: <span class="string">&quot;website&quot;</span>, <span class="attr">&quot;_type&quot;</span>: <span class="string">&quot;blog&quot;</span>, <span class="attr">&quot;_id&quot;</span>: <span class="string">&quot;123&quot;</span> &#125;&#125;</span><br><span class="line">&#123; <span class="attr">&quot;title&quot;</span>:    <span class="string">&quot;My first blog post&quot;</span> &#125;</span><br><span class="line">&#123; <span class="attr">&quot;index&quot;</span>:  &#123; <span class="attr">&quot;_index&quot;</span>: <span class="string">&quot;website&quot;</span>, <span class="attr">&quot;_type&quot;</span>: <span class="string">&quot;blog&quot;</span> &#125;&#125;</span><br><span class="line">&#123; <span class="attr">&quot;title&quot;</span>:    <span class="string">&quot;My second blog post&quot;</span> &#125;</span><br><span class="line">&#123; <span class="attr">&quot;update&quot;</span>: &#123; <span class="attr">&quot;_index&quot;</span>: <span class="string">&quot;website&quot;</span>, <span class="attr">&quot;_type&quot;</span>: <span class="string">&quot;blog&quot;</span>, <span class="attr">&quot;_id&quot;</span>: <span class="string">&quot;123&quot;</span>, <span class="attr">&quot;_retry_on_conflict&quot;</span> : <span class="number">3</span>&#125; &#125;</span><br><span class="line">&#123; <span class="attr">&quot;doc&quot;</span> : &#123;<span class="attr">&quot;title&quot;</span> : <span class="string">&quot;My updated blog post&quot;</span>&#125; &#125;</span><br></pre></td></tr></table></figure><p>响应体：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">&quot;took&quot;</span>: <span class="number">4</span>,</span><br><span class="line">   <span class="attr">&quot;errors&quot;</span>: <span class="literal">false</span>, </span><br><span class="line">   <span class="attr">&quot;items&quot;</span>: [</span><br><span class="line">      &#123;  <span class="attr">&quot;delete&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;_index&quot;</span>:   <span class="string">&quot;website&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;_type&quot;</span>:    <span class="string">&quot;blog&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;_id&quot;</span>:      <span class="string">&quot;123&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;_version&quot;</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">&quot;status&quot;</span>:   <span class="number">200</span>,</span><br><span class="line">            <span class="attr">&quot;found&quot;</span>:    <span class="literal">true</span></span><br><span class="line">      &#125;&#125;,</span><br><span class="line">      &#123;  <span class="attr">&quot;create&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;_index&quot;</span>:   <span class="string">&quot;website&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;_type&quot;</span>:    <span class="string">&quot;blog&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;_id&quot;</span>:      <span class="string">&quot;123&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;_version&quot;</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="attr">&quot;status&quot;</span>:   <span class="number">201</span></span><br><span class="line">      &#125;&#125;,</span><br><span class="line">      &#123;  <span class="attr">&quot;create&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;_index&quot;</span>:   <span class="string">&quot;website&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;_type&quot;</span>:    <span class="string">&quot;blog&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;_id&quot;</span>:      <span class="string">&quot;EiwfApScQiiy7TIKFxRCTw&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;_version&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">&quot;status&quot;</span>:   <span class="number">201</span></span><br><span class="line">      &#125;&#125;,</span><br><span class="line">      &#123;  <span class="attr">&quot;update&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;_index&quot;</span>:   <span class="string">&quot;website&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;_type&quot;</span>:    <span class="string">&quot;blog&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;_id&quot;</span>:      <span class="string">&quot;123&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;_version&quot;</span>: <span class="number">4</span>,</span><br><span class="line">            <span class="attr">&quot;status&quot;</span>:   <span class="number">200</span></span><br><span class="line">      &#125;&#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><del>新的属性又跳出来给了你一个耳刮子（不是）</del></p><p>又有新的属性了，一起看看</p><ul><li>took：这次的请求花费了多少<strong>毫秒</strong></li><li>errors：有没有失败的子请求，如果为false就是请求全部成功</li><li>items：按照请求的顺序列出的响应结果</li></ul><p>和刚才的<code>mget</code>API相同，每个子请求都独立执行，一次失败并不会影响整体</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">&quot;took&quot;</span>: <span class="number">3</span>,</span><br><span class="line">   <span class="attr">&quot;errors&quot;</span>: <span class="literal">true</span>, </span><br><span class="line">   <span class="attr">&quot;items&quot;</span>: [</span><br><span class="line">      &#123;  <span class="attr">&quot;create&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;_index&quot;</span>:   <span class="string">&quot;website&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;_type&quot;</span>:    <span class="string">&quot;blog&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;_id&quot;</span>:      <span class="string">&quot;123&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;status&quot;</span>:   <span class="number">409</span>, </span><br><span class="line">            <span class="attr">&quot;error&quot;</span>:    <span class="string">&quot;DocumentAlreadyExistsException </span></span><br><span class="line"><span class="string">                        [[website][4] [blog][123]:</span></span><br><span class="line"><span class="string">                        document already exists]&quot;</span></span><br><span class="line">      &#125;&#125;,</span><br><span class="line">      &#123;  <span class="attr">&quot;index&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;_index&quot;</span>:   <span class="string">&quot;website&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;_type&quot;</span>:    <span class="string">&quot;blog&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;_id&quot;</span>:      <span class="string">&quot;123&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;_version&quot;</span>: <span class="number">5</span>,</span><br><span class="line">            <span class="attr">&quot;status&quot;</span>:   <span class="number">200</span> </span><br><span class="line">      &#125;&#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比如这个响应体，<code>create</code>请求失败了，但是<code>index</code>请求成功了，这种方式虽然好，但是有个缺点：</p><ul><li>每个请求之间独立处理，这也意味着<code>bulk</code>请求并非原子性的，无法实现事务控制</li></ul><p>批量请求能帮助我们加快查询速度，但是这个加快也是有限制的，并不是数据量越大节省的时间越多，当我们批量请求时，所有的请求都要由接收到的节点加载到内存中，因此请求越大，其它请求所能获得的内存就越少。</p><p>批量请求的大小有一个最佳值，它取决于硬件大小，文档大小和复杂度、索引和搜索的负载的整体情况，有点复杂，怎么找到这个最佳点，一个简单地方法就是疯狂测试。</p><h2 id="分布式文档存储"><a href="#分布式文档存储" class="headerlink" title="分布式文档存储"></a>分布式文档存储</h2><p>前面我们了解了ES数据的存取，都是一些操作性的东西，没有什么技术含量，来点有技术的东西吧。</p><p>在这章中，我们会介绍文件是如何分布到集群的，又是如何从集群中获取等核心的技术细节，这能帮助我们更好的理解ES，当然，如果你不想这么深入了解，也并没有什么太大问题，也能正常使用。</p><h3 id="路由一个文档到一个分片中"><a href="#路由一个文档到一个分片中" class="headerlink" title="路由一个文档到一个分片中"></a>路由一个文档到一个分片中</h3><p>我们知道，在ES中，一个节点可以有多个分片，那我们又怎么知道文档是被存放到哪一个分片中的呢？</p><p>实际上，ES对这个有一套公式</p><p><code>shard = hash(routing) % number_of_primary_shards</code></p><p><del>看不懂吗，看不懂没关系，我也看不懂</del></p><p>首先，<code>routing</code>是一个可变值，默认为文档的<code>id</code>，也可以设置成一个自定义的值，<code>routing</code>通过hash函数生成一个数字，根据这个数字来决定这个文档会被存放到哪一个分片中去</p><p>同时，这也解释了为什么我们创建索引的时候就要确定好主分片的数量，并且永远不能改变这个数量，如果数量可以改变，那么之前的路由也就全都无效了，会导致文档丢失</p><p>继续说回<code>routing</code>，前面说我们可以自定义routing的值，怎么定义呢，所有文档的API（<code>get</code>、<code>index</code>、<code>delete</code>、<code>bulk</code>、<code>update</code>、<code>mget</code>）都可以接受一个<code>routing</code>参数，通过这个参数我们可以自动以文档到分片的映射。</p><p>这个有什么用呢？例如我们想要将所有属于同一个用户的文档都存储到某一个分片中，就可以这么设计，这个后面会讲到。</p><h3 id="主分片和副本分片的交互"><a href="#主分片和副本分片的交互" class="headerlink" title="主分片和副本分片的交互"></a>主分片和副本分片的交互</h3><p>假设我们现在有一个ES集群，在这个集群中有三个节点。他们包含了一个叫做<code>blogs</code>的索引，有两个主分片，每一个主分片又有两个副本分片。相同分片的副本不会放在同一个节点中，所以我们的节点应该是这样子</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">节点1（master）节点2   节点3</span><br><span class="line"> R0   P1       R0    R1      P0   R1</span><br></pre></td></tr></table></figure><p>P代表主分片，R代表副分片</p><p>在这个集群中，每一个节点都有处理任意请求的能力，每个节点都知道集群中任意文档的位置，可以直接将请求转发到需要的分片上。</p><h3 id="新建、索引和删除文档"><a href="#新建、索引和删除文档" class="headerlink" title="新建、索引和删除文档"></a>新建、索引和删除文档</h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这章可能文字比较多，但是不难，耐心看完</span><br></pre></td></tr></table></figure><p>为什么叫副本分片，因为它本身只能用来进行读操作，那么它如何进行写操作呢，如同新建、索引和删除文档的请求都是写操作，必须在主分片上完成之后再复制到副本分片上</p><p>如果副本分片接收到了写操作，该分片所属节点会将请求发送到主分片所属节点</p><p>比如，如果我们将想要更新<code>P1</code>分片下的文档，但是这个请求被发送到了节点2上，那么ES将会进行如下操作：</p><ul><li>根据节点使用文档的<code>id</code>确定文档属于分片1，这时请求会被转发到节点1上</li><li>节点1根据请求进行相应操作，如果操作成功，它会将请求并行转发到节点2和节点3的副本分片上进行赋值。</li><li>如果所有副本分片都报告复制成功，节点1将会返回请求成功的信息。</li></ul><p>在文档变更时，所有主分片和副分片都执行完成时才是执行成功的，因此数据安全</p><p>但是有一些可选的参数请求允许我们以安全作为代价来提升性能，<strong>并不推荐这么做</strong>，因为ES已经很快了：</p><h4 id="consistency"><a href="#consistency" class="headerlink" title="consistency"></a>consistency</h4><p>consistency，翻译：一致性，在默认设置下，为了避免网络分区故障导致的数据不一致，如果想要对分片进行写操作，主分片会检测所有副本分片是否处于活跃状态，如果全部处于活跃状态，才会去进行写操作。</p><p>参数值：</p><ul><li>one：只要主分片状态OK就可以进行写操作</li><li>all：只有主分片和所有副本分片状态OK才能进行写操作</li><li>quorum：大多数副本分片状态OK就可以进行写操作</li></ul><p>怎么算大多数呢，ES对此有一个计算公式：</p><p><code>int((primary + replicas) / 2) + 1</code></p><p>primary：主分片数量</p><p>replicas：副本分片数量</p><p>也就是说，在本案例中，当所有活跃分配总和大于等于<code>(1 + 3) / 2 + 1 = 3</code>时，就可以进行写操作。</p><h4 id="timeout"><a href="#timeout" class="headerlink" title="timeout"></a>timeout</h4><p>当进行写操作时，如果没有足够的副本分片，ES不会立即返回错误，而是会等待一段时间，默认情况下ES最多会等待一分钟，而<code>timeout</code>参数可以设置等待时间，<code>100</code>代表100毫秒，<code>30s</code>代表30秒</p><h3 id="取回一个文档-1"><a href="#取回一个文档-1" class="headerlink" title="取回一个文档"></a>取回一个文档</h3><p>我们可以从ES集群中的主分片或者其他任意副本分片检索文档，步骤如下：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">节点1（master）节点2   节点3</span><br><span class="line"> R0   P1       R0    R1      P0   R1</span><br></pre></td></tr></table></figure><p>同样还是这一个集群</p><ul><li>客户端向节点1发送了一个<code>get</code>请求</li><li>节点通过文档的<code>id</code>确认了该文档属于分片0，分片0在三个节点上都有分片，在这种情况下，节点1会随机将请求转发或者在当前节点获取，这里假设请求转发给了节点2</li><li>节点2将文档返回给节点1，然后节点1再将文档返回给客户</li></ul><p>在ES集群中处理请求时，协调节点在每次请求的时候都会通过轮询所有的副本分片来达到负载均衡。</p><h3 id="局部更新文档"><a href="#局部更新文档" class="headerlink" title="局部更新文档"></a>局部更新文档</h3><p>在ES集群中，更新文档的步骤会比前两个多一些，还是拿这个集群做演示</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">节点1（master）节点2   节点3</span><br><span class="line"> R0   P1       R0    R1      P0   R1</span><br></pre></td></tr></table></figure><ul><li>客户端向节点1发送了一个<code>update</code>请求</li><li>节点1检测到该文档属于分片0，于是会将请求转发到节点3上</li><li>节点3从主分片索引文档，修改<code>_source</code>字段中的json，并且尝试重新索引文档（至于为什么要重新索引，回去看<code>update</code>请求的原理）。如果文档已经被另一个进程修改，节点会重复这一步骤，如果超时才放弃。</li><li>如果节点3更新文档成功了，那么他会将新的文档并行转发至节点1和节点2的副本分片，重新建立索引，如果都更新成功了，节点3会向协调节点返回成功，协调节点向客户端返回成功</li></ul><h3 id="多文档模式"><a href="#多文档模式" class="headerlink" title="多文档模式"></a>多文档模式</h3><p><code>mget</code>和<code>bulk</code>API的模式<strong>类似于</strong>单文档模式，但是又有所不同：</p><ul><li>协调节点知道每个文档在哪个分片中。它会将多文档请求分解成每个分片的多文档请求，并且将这些请求转发到对应的节点</li></ul><p>使用<code>mget</code>步骤如下：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">节点1（master）节点2   节点3</span><br><span class="line"> R0   P1       R0    R1      P0   R1</span><br></pre></td></tr></table></figure><ul><li>客户端向节点1发送一个<code>mget</code>请求</li><li>节点1为每个分片构建多文档获取请求，然后并行转发到托管在每个所需的主分片或者副本分片的节点上。</li><li>被转发节点处理请求并返回结果，节点1收到所有请求后，会构建响应信息并返回给客户端</li></ul><p>在<code>mget</code>请求中可以在<code>docs</code>参数中为每个文档设置<code>routing</code>参数</p><p>使用<code>bulk</code>修改多个文档的步骤：</p><p>同样还是上面那个ES集群</p><ul><li>客户端向节点1发送一个<code>bulk</code>请求</li><li>节点1根据文档<code>id</code>创建批量请求，并将请求发送到包含对应主分片的节点上</li><li>主分片按照顺序执行请求，当一次操作成功后，主分片并行转发新文档到副本分片，然后执行下一个操作。当所有操作成功后，该节点向协调节点报告成功，协调节点向客户端返回结果</li></ul><p><code>bulk</code>API可以在整个批量请求的最顶层使用<code>consistency</code>参数，以及在每个请求的元数据中设置<code>routing</code>参数</p><h2 id="最基本的工具——搜索"><a href="#最基本的工具——搜索" class="headerlink" title="最基本的工具——搜索"></a>最基本的工具——搜索</h2><p>通过之前的学习，我们已经知道了ES简单操作的基本原理，以及如何使用ES作为NoSQL风格的分布式文档存储系统。但是，ES真正的强大之处并不在这里，在于它可以从无规律的数据中心找出有用的数据——从”大数据”到”大信息”</p><p>ES不仅仅能存储文档，还能够进行搜索，这也是为什么我们使用结构化的JSON文档，而不是无结构的二进制数据的原因。</p><p>在ES文档中，每一个字段都将被索引并且能够被查询，在简单的查询中，ES可以使用所有的索引字段，并且以极快的速度返回结果，ES搜索可以做到这些：</p><ul><li>在类似于<code>gender</code>或<code>age</code>这种字段上使用结构化查询，<code>join_date</code>这样的字段上可以使用排序，就像是SQL的结构化查询一样。</li><li>全文检索，找出所有匹配关键字的文档并按照相关性进行返回</li></ul><p>ES很多搜索都是开箱即用，为了方便我们充分挖掘ES的潜力，需要了解一下三个概念：</p><ul><li>映射（Mapping）：描述了数据在每个字段内如何存储</li><li>分析（Analysis）：全文是如何处理使之可以被搜索的</li><li>领域特定查询语言（Query DSL）：ES中强大而灵活的查询语言</li></ul><p>详细的内容我们会在后面讲到，在本章节，我们主要介绍这三点的一些基本概念</p><h3 id="空搜索"><a href="#空搜索" class="headerlink" title="空搜索"></a>空搜索</h3><p>在搜索API中，最基础的就是没有指定任何查询的空搜索，它会返回该集群中所有索引下的所有文档：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br></pre></td></tr></table></figure><p>响应体：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">&quot;hits&quot;</span> : &#123;</span><br><span class="line">      <span class="attr">&quot;total&quot;</span> :       <span class="number">14</span>,</span><br><span class="line">      <span class="attr">&quot;hits&quot;</span> : [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;_index&quot;</span>:   <span class="string">&quot;us&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;_type&quot;</span>:    <span class="string">&quot;tweet&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;_id&quot;</span>:      <span class="string">&quot;7&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;_score&quot;</span>:   <span class="number">1</span>,</span><br><span class="line">          <span class="attr">&quot;_source&quot;</span>: &#123;</span><br><span class="line">             <span class="attr">&quot;date&quot;</span>:    <span class="string">&quot;2014-09-17&quot;</span>,</span><br><span class="line">             <span class="attr">&quot;name&quot;</span>:    <span class="string">&quot;John Smith&quot;</span>,</span><br><span class="line">             <span class="attr">&quot;tweet&quot;</span>:   <span class="string">&quot;The Query DSL is really powerful and flexible&quot;</span>,</span><br><span class="line">             <span class="attr">&quot;user_id&quot;</span>: <span class="number">2</span></span><br><span class="line">          &#125;</span><br><span class="line">       &#125;,</span><br><span class="line">        ... <span class="number">9</span> RESULTS REMOVED ...</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;max_score&quot;</span> :   <span class="number">1</span></span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="attr">&quot;took&quot;</span> :           <span class="number">4</span>,</span><br><span class="line">   <span class="attr">&quot;_shards&quot;</span> : &#123;</span><br><span class="line">      <span class="attr">&quot;failed&quot;</span> :      <span class="number">0</span>,</span><br><span class="line">      <span class="attr">&quot;successful&quot;</span> :  <span class="number">10</span>,</span><br><span class="line">      <span class="attr">&quot;total&quot;</span> :       <span class="number">10</span></span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="attr">&quot;timed_out&quot;</span> :      <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>又有一些陌生的参数了，来看一看：</p><ul><li>hits<ul><li>这是返回结果中最重要的东西，它包含<code>total</code>字段和<code>hits</code>字段</li><li>total：匹配到的文档总数</li><li>hits：查询结果的前十个文档</li><li>在hits数组中，还有一个<code>score</code>参数，这个就是排序的依据</li><li>max_score：查询所匹配文档的<code>score</code>的最大值</li></ul></li><li>took：整个搜索请求耗费了多少毫秒</li><li>shards：在查询中参与分片的总数，以及这些分片成功了多少个，失败了多少个</li><li>timeout：查询多久超时</li></ul><h3 id="多索引、多类型"><a href="#多索引、多类型" class="headerlink" title="多索引、多类型"></a>多索引、多类型</h3><p>假设我们现在有两个索引：<code>us</code>和<code>gb</code>，如果不对某一特殊索引做限制，那么GET请求就会查询及群众的所有文档，ES会将请求转发到每一个主分片或者副本分片，汇集查询出的前十个结果，并且返回给我们</p><p>如果我们想在一个或者多个特定索引中进行搜索，可以通过在URL中指定索引和类型来达到这种效果：</p><ul><li><code>_search</code>：在所有索引中搜索所有的类型</li><li><code>/gb/_search</code>：在gb索引中搜索所有文档</li><li><code>/gb,us/_search</code>：在gb和us索引中搜索所有文档</li><li><code>/g*,u*/_search</code>：在所有g和u开头的索引中搜索所有文档</li><li><code>/gb/user/_search</code>：在gb索引中搜索user类型</li><li><code>/gb,us/user,tweet/_search</code>：在gb和us索引中搜索user和type类型</li><li><code>/_all/user,tweet/_search</code>：在所有索引中搜索user和type类型</li></ul><h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h3><p>在之前的搜索中，搜索出来的文档明明有14个，却只给我们展示了10条，那么如何能够看到后面的文档，和SQL中使用<code>limit</code>关键字返回单个<code>page</code>结果的方法相同，ES允许我们传入<code>from</code>和<code>size</code>参数</p><ul><li>size：返回的结果数量，默认为10</li><li>from：应该跳过的初始结果数量，默认为0</li></ul><p>也就是说，如果每页展示5条数据，通过下面这种方式，我们能获取1-3页的数据</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET /_search?size=<span class="number">5</span></span><br><span class="line">GET /_search?size=<span class="number">5</span>&amp;from=<span class="number">5</span></span><br><span class="line">GET /_search?size=<span class="number">5</span>&amp;from=<span class="number">10</span></span><br></pre></td></tr></table></figure><p>考虑到分页过深以及一次请求太多结果的情况，结果集在返回之前会先进行排序。<br>但是，一个请求常常会跨越多个分片，所以这些结果需要进行集中排序以保证整体顺序的一致。</p><h3 id="轻量搜索"><a href="#轻量搜索" class="headerlink" title="轻量搜索"></a>轻量搜索</h3><p>ES中有两种形式的搜索API：</p><ul><li>轻量的查询字符串版本，要求在查询字符串中传递所有的参数</li><li>更加完成的请求体版本，要求使用JSON格式和更丰富的查询表达式作为搜索语言</li></ul><h4 id="查询字符串搜索"><a href="#查询字符串搜索" class="headerlink" title="查询字符串搜索"></a>查询字符串搜索</h4><p>这种搜索非常适用于通过命令行做及时查询。</p><p>例如，如果想查询在<code>tweet</code>类型中<code>tweet</code>字段包含<code>elasticsearch</code>单词的所有文档，可以用下面这种方式：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /_all/tweet/_search?q=tweet:elasticsearch</span><br></pre></td></tr></table></figure><p>再比如，想在<code>name</code>字段中包含<code>john</code>并且在<code>tweet</code>字段中包含<code>mary</code>，实际查询就是</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name:john+tweet:mary</span><br></pre></td></tr></table></figure><p>但是查询字符串参数需要<strong>百分比编码</strong>，这种编码会比较难以理解，这里用的是URL编码，可以去百度一下对应的值</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /_search?q=%<span class="number">2</span>Bname%<span class="number">3</span>Ajohn+%<span class="number">2</span>Btweet%<span class="number">3</span>Amary</span><br></pre></td></tr></table></figure><p>在这里，%2B代表<code>+</code>，%3A代表<code>:</code></p><p><code>+</code>前缀表示必须与查询条件匹配。</p><p><code>-</code>前缀表示一定不与查询条件匹配</p><h3 id="all字段"><a href="#all字段" class="headerlink" title="_all字段"></a>_all字段</h3><p>这个简单搜索返回包含<code>mary</code>的文档</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /_search?q=mary</span><br></pre></td></tr></table></figure><p>一下这些情况都会返回：</p><ul><li>有一个用户叫做<code>mary</code></li><li>六条微博发自<code>mary</code></li><li>一条微博<code>@mary</code></li></ul><p>虽然这三个值属于不同字段，但是都被ES查询出来了，那么ES是怎么做到的呢？</p><p>当我们索引一个文档的时候，ES会取出所有字段的值进行拼接，行程一个大的字符串，作为<code>_all</code>字段进行索引。例如，当索引这个文档时：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;tweet&quot;</span>:    <span class="string">&quot;However did I manage before Elasticsearch?&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;date&quot;</span>:     <span class="string">&quot;2014-09-14&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>:     <span class="string">&quot;Mary Jones&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;user_id&quot;</span>:  <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就会变成</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;However did I manage before Elasticsearch? 2014-09-14 Mary Jones 1&quot;</span></span><br></pre></td></tr></table></figure><p>这就好像增加了一个<code>_all</code>额外字段</p><p>简单的查询并不能满足我们的需求，考虑下面这种条件：</p><ul><li><code>name</code>字段中包含<code>mary</code>或者<code>john</code></li><li><code>date</code>值大于<code>2014-09-10</code></li><li><code>_all</code>字段包括<code>aggregations</code>或者<code>geo</code></li></ul><p>伪代码：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+name:(mary+john)+date:&gt;<span class="number">2014</span><span class="number">-09</span><span class="number">-10</span>+(aggregations geo)</span><br></pre></td></tr></table></figure><p>URL编码：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /_search?q=%<span class="number">2</span>Bname%<span class="number">3</span>A(mary+john)+%<span class="number">2</span>Bdate%<span class="number">3</span>A%<span class="number">3E2014</span><span class="number">-09</span><span class="number">-10</span>+%<span class="number">2</span>B(aggregations+geo)</span><br></pre></td></tr></table></figure><p>除了难以理解的URL编码，这种清凉的查询字符串搜索效果还是挺不错的。它的查询语法URL编码中有详细解释。</p><p>查询字符串搜索允许任何用户在索引的任意字段上执行可能较慢且重量级的查询，这可能会暴露隐私信息，甚至可能将集群拖垮</p><p>在生产中，我们还是更偏向于使用<code>request body</code>查询API，但是在那之前，我们需要了解数据在ES中是如何被索引的</p><h2 id="映射和分析"><a href="#映射和分析" class="headerlink" title="映射和分析"></a>映射和分析</h2><p>在我们尝试索引数据时，会发现一些奇怪的事情，比如下面这种情况：</p><p>在我们的集群中，有12条数据，其中只有一条数据包含<code>2014-09-15</code>这个值，但是通过不同的查询会有不同地命中总数</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET /_search?q=<span class="number">2014</span>              # <span class="number">12</span> results</span><br><span class="line">GET /_search?q=<span class="number">2014</span><span class="number">-09</span><span class="number">-15</span>        # <span class="number">12</span> results !</span><br><span class="line">GET /_search?q=date:<span class="number">2014</span><span class="number">-09</span><span class="number">-15</span>   # <span class="number">1</span>  result</span><br><span class="line">GET /_search?q=date:<span class="number">2014</span>         # <span class="number">0</span>  results !</span><br></pre></td></tr></table></figure><p>我们发现，在<code>_all</code>字段查询日期时，会返回所有文档，而在<code>date</code>字段只查询年份又没有返回文档</p><p>这是因为在<code>_all</code>字段和<code>date</code>字段的索引方式不同，现在来伪造一个请求，看一看ES如何解析我们的文档结构：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /gb/_mapping/tweet</span><br></pre></td></tr></table></figure><p>我们会得到以下结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">&quot;gb&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;mappings&quot;</span>: &#123;</span><br><span class="line">         <span class="attr">&quot;tweet&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">               <span class="attr">&quot;date&quot;</span>: &#123;</span><br><span class="line">                  <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;date&quot;</span>,</span><br><span class="line">                  <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;strict_date_optional_time||epoch_millis&quot;</span></span><br><span class="line">               &#125;,</span><br><span class="line">               <span class="attr">&quot;name&quot;</span>: &#123;</span><br><span class="line">                  <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;string&quot;</span></span><br><span class="line">               &#125;,</span><br><span class="line">               <span class="attr">&quot;tweet&quot;</span>: &#123;</span><br><span class="line">                  <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;string&quot;</span></span><br><span class="line">               &#125;,</span><br><span class="line">               <span class="attr">&quot;user_id&quot;</span>: &#123;</span><br><span class="line">                  <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;long&quot;</span></span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里，ES为我们动态产生了一个映射，这个响应告诉我们date字段被认为是<code>date</code>类型的。由于<code>_all</code>是默认字段，所以没有提及，但是要知道<code>_all</code>字段是<code>string</code>类型的</p><p><code>date</code>字段与<code>string</code>字段索引方式不同，因此搜索结果也不一样。</p><p>他们最大的差异在于代表精确值的字段和代表全文的字段。这个区别非常重要</p><h3 id="精确值-VS-全文"><a href="#精确值-VS-全文" class="headerlink" title="精确值 VS 全文"></a>精确值 VS 全文</h3><p>在ES中，数据可以分为两类：精确值和全文</p><p>精确值：顾名思义，如同挺起来那样精确，例如用户ID和日期，用户名与邮箱地址，对于精确值来说，<code>Foo</code>和<code>foo</code>不同，<code>2014</code>与<code>2014-09-15</code>也不同</p><p>全文指的是文本数据，例如一个推文的内容或一封邮件的内容。</p><p>精确值很容易查询，结果只有匹配或不匹配</p><p>相比之下，全文查询数据要微妙得多，我们不仅仅要看<code>文档匹配吗</code>，还要看<code>这个文档有多匹配</code></p><p>我们不会对文档做全文类型的精确匹配。相反，我们希望在文本类的域中搜索，不仅如此，我们还希望能够搜索能够理解我们的意图：</p><ul><li>搜索<code>UK</code>，会返回包含<code>United Kindom</code>的文档</li><li>搜索<code>jump</code>，会匹配<code>jumped</code>、<code>jumps</code>、<code>jumping</code>甚至是<code>leap</code></li><li>搜索<code>jognny walker</code>会匹配<code>Johnnie Walker</code>、<code>johnnie deep</code>应该匹配<code>Johnny Depp</code></li><li><code>fox news hunting</code>应该返回关于狩猎的故事和猎狐的故事</li></ul><p>为了促进这类在全文域的查询，ES会对文档进行分析，然后对结果创建倒排索引</p><h3 id="倒排索引"><a href="#倒排索引" class="headerlink" title="倒排索引"></a>倒排索引</h3><p>为了快速的进行全文搜索，ES使用了一种叫做倒排索引的结构。</p><p>一个倒排索引由文档中所有不重复词的列表构成，对于其中每个词，有一个包含它的文档列表。</p><p>假设我们现在有两个文档，他们的<code>content</code>字段如下：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">The quick brown fox jumped over the lazy dog</span><br><span class="line">Quick brown foxes leap over lazy dogs in summer</span><br></pre></td></tr></table></figure><p>为了创建倒排索引，我们首先需要将文档中的<code>content</code>进行分词，创建一个包含有不重复词条的排序列表，然后列出每个词条出现在哪个文档，结果如下：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Term      Doc<span class="built_in">_</span>1  Doc<span class="built_in">_</span>2</span><br><span class="line">-------------------------</span><br><span class="line">Quick   |       |  X</span><br><span class="line">The     |   X   |</span><br><span class="line">brown   |   X   |  X</span><br><span class="line">dog     |   X   |</span><br><span class="line">dogs    |       |  X</span><br><span class="line">fox     |   X   |</span><br><span class="line">foxes   |       |  X</span><br><span class="line">in      |       |  X</span><br><span class="line">jumped  |   X   |</span><br><span class="line">lazy    |   X   |  X</span><br><span class="line">leap    |       |  X</span><br><span class="line">over    |   X   |  X</span><br><span class="line">quick   |   X   |</span><br><span class="line">summer  |       |  X</span><br><span class="line">the     |   X   |</span><br><span class="line">------------------------</span><br></pre></td></tr></table></figure><p>比如现在我们想搜索<code>quick brown</code>，我们只需要查找包含每个词条的文档</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Term      Doc<span class="built_in">_</span>1  Doc<span class="built_in">_</span>2</span><br><span class="line">-------------------------</span><br><span class="line">brown   |   X   |  X</span><br><span class="line">quick   |   X   |</span><br><span class="line">------------------------</span><br><span class="line">Total   |   2   |  1</span><br></pre></td></tr></table></figure><p>虽然两个文档都有匹配，但是文档1匹配度更高。</p><p>但是，目前的倒排索引有一些问题：</p><ul><li><code>Quick</code>和<code>quick</code>以独立的词条出现，然而用户可能认为他们是相同的</li><li><code>fox</code>和<code>foxes</code>非常相似，就像<code>dog</code>和<code>dogs</code>，他们有相同的词根</li><li>更过分一点的，<code>jumped</code>和<code>leap</code>，尽管没有相同词根，但是他们是近义词</li></ul><p>为了找到与用户搜索的词条完全不一致，但是有足够相关性的文档，我们可以：</p><ul><li><code>Quick</code>转化为小写<code>quick</code></li><li><code>foxes</code>可以词干提取为<code>fox</code>。类似的，<code>dogs</code>可以提取为<code>dog</code></li><li><code>jumped</code>和<code>leap</code>是同义词，可以索引为相同的单词<code>jump</code></li></ul><p>然后索引就会变成这样</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Term      Doc<span class="built_in">_</span>1  Doc<span class="built_in">_</span>2</span><br><span class="line">-------------------------</span><br><span class="line">brown   |   X   |  X</span><br><span class="line">dog     |   X   |  X</span><br><span class="line">fox     |   X   |  X</span><br><span class="line">in      |       |  X</span><br><span class="line">jump    |   X   |  X</span><br><span class="line">lazy    |   X   |  X</span><br><span class="line">over    |   X   |  X</span><br><span class="line">quick   |   X   |  X</span><br><span class="line">summer  |       |  X</span><br><span class="line">the     |   X   |  X</span><br><span class="line">------------------------</span><br></pre></td></tr></table></figure><p>但这还远远不够，我们只是对索引进行了转化，但是搜索<code>Quick fox</code>仍然会失败，因为在我们的索引中已经没有<code>Quick0</code>了，但是如果我们对搜索的字符串使用与<code>content</code>域相同的标准化规则，会变成查询<code>quick fox</code>，这样两个文档就都会匹配</p><p>这个分词和标准化的过程称为<strong>分析</strong></p><h3 id="分析和分析器"><a href="#分析和分析器" class="headerlink" title="分析和分析器"></a>分析和分析器</h3><p>分析包含如下内容：</p><ul><li>将文本拆分成适合用于倒排索引的独立词条</li><li>将这些词条统一化为标准格式以提高他们的可搜索性</li></ul><p>分析过程由分析器执行，分析器实际上是将三个功能封装到了一个包里：</p><ul><li><p>字符过滤器：字符串按照顺序通过每个字符过滤器，一个字符过滤器可以用来去掉HTML，或者将<code>&amp;</code>转化为<code>and</code></p></li><li><p>分词器：字符串被分词器分为单个的词条。一个简单地分词器遇到空格和标点的时候，可能会将文本拆分成词条</p></li><li><p>token过滤器：词条按顺序通过词条过滤器，在这个过程中可能会进行如下操作</p><ul><li>改变词条，比如将大写转化为小写</li><li>删除词条，比如<code>a</code>、<code>and</code>等无用词条</li><li>增加词条，比如增加同义词</li></ul><p>ES为我们提供了开箱即用的字符过滤器、分词器和token过滤器。</p></li></ul><h4 id="内置分析器"><a href="#内置分析器" class="headerlink" title="内置分析器"></a>内置分析器</h4><p>ES提供了可以直接使用的分析器，接下来会介绍最重要的几个分析器以及他们的区别</p><p>内置分析器有：</p><ul><li>标准分析器</li><li>简单分析器</li><li>空格分析器</li><li>语言分析器</li></ul><p>对于同一段话，他们分析出来的结果是不同的，比如下面这句话</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;Set the shape to semi-transparent by calling set<span class="built_in">_</span>trans(5)&quot;</span><br></pre></td></tr></table></figure><h5 id="标准分析器"><a href="#标准分析器" class="headerlink" title="标准分析器"></a>标准分析器</h5><p>这是ES的默认分析器，他也是分析各种语言文本最常用的选择，根据Unicode联盟定义的单词边界划分文本，删除绝大部分标点，最后将词条小写</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set, the, shape, to, semi, transparent, by, calling, set<span class="built_in">_</span>trans, 5</span><br></pre></td></tr></table></figure><h5 id="简单分析器"><a href="#简单分析器" class="headerlink" title="简单分析器"></a>简单分析器</h5><p>简单分析器在任何不是字母的地方分割文本，将词条小写</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set, the, shape, to, semi, transparent, by, calling, set, trans</span><br></pre></td></tr></table></figure><h5 id="空格分析器"><a href="#空格分析器" class="headerlink" title="空格分析器"></a>空格分析器</h5><p>在空格的地方分割文本</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set, the, shape, to, semi-transparent, by, calling, set<span class="built_in">_</span>trans(5)</span><br></pre></td></tr></table></figure><h5 id="语言分析器"><a href="#语言分析器" class="headerlink" title="语言分析器"></a>语言分析器</h5><p>这个可以用于很多语言。他们可以考虑指定语言的特点。例如，英语分析器附带了一组英语无用词，例如<code>and</code>或<code>the</code>，他们对相关性没有多少影响，会被删除。由于理解英语语法的规则，这个分析器可以提取英语单词的词干。</p><p>英语分词器会产生以下词条：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set, shape, semi, transpar, call, set<span class="built_in">_</span>tran, 5</span><br></pre></td></tr></table></figure><p>有些单词甚至变成了词根式</p><h4 id="什么时候使用分析器"><a href="#什么时候使用分析器" class="headerlink" title="什么时候使用分析器"></a>什么时候使用分析器</h4><p>当我们索引一个文档，它的全文域被分析成词条以用来创建倒排索引。但是，当我们在全文域进行搜索时，我们需要将查询字符串通过一定的分析过程，来保证我们搜索的词条格式与索引中的格式一致。</p><ul><li>当查询一个全文域时，会对查询字符串应用相同的分析器，以产生正确的搜索分词列表</li><li>当查询精确值域时，就不会使用分析器</li></ul><p>现在我们就可以理解在刚开始的时候，为什么会出现那样的查询结果</p><h4 id="测试分析器"><a href="#测试分析器" class="headerlink" title="测试分析器"></a>测试分析器</h4><p>如果你还是很难理解分词的过程和实际被存储到索引中的词条，可以使用<code>analyze</code>API来查看文本时如何被分析的：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET /_analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;standard&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;Text to analyze&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应体：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">&quot;tokens&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="attr">&quot;token&quot;</span>:        <span class="string">&quot;text&quot;</span>,</span><br><span class="line">         <span class="attr">&quot;start_offset&quot;</span>: <span class="number">0</span>,</span><br><span class="line">         <span class="attr">&quot;end_offset&quot;</span>:   <span class="number">4</span>,</span><br><span class="line">         <span class="attr">&quot;type&quot;</span>:         <span class="string">&quot;&lt;ALPHANUM&gt;&quot;</span>,</span><br><span class="line">         <span class="attr">&quot;position&quot;</span>:     <span class="number">1</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="attr">&quot;token&quot;</span>:        <span class="string">&quot;to&quot;</span>,</span><br><span class="line">         <span class="attr">&quot;start_offset&quot;</span>: <span class="number">5</span>,</span><br><span class="line">         <span class="attr">&quot;end_offset&quot;</span>:   <span class="number">7</span>,</span><br><span class="line">         <span class="attr">&quot;type&quot;</span>:         <span class="string">&quot;&lt;ALPHANUM&gt;&quot;</span>,</span><br><span class="line">         <span class="attr">&quot;position&quot;</span>:     <span class="number">2</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="attr">&quot;token&quot;</span>:        <span class="string">&quot;analyze&quot;</span>,</span><br><span class="line">         <span class="attr">&quot;start_offset&quot;</span>: <span class="number">8</span>,</span><br><span class="line">         <span class="attr">&quot;end_offset&quot;</span>:   <span class="number">15</span>,</span><br><span class="line">         <span class="attr">&quot;type&quot;</span>:         <span class="string">&quot;&lt;ALPHANUM&gt;&quot;</span>,</span><br><span class="line">         <span class="attr">&quot;position&quot;</span>:     <span class="number">3</span></span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>token</code>中，每个元素就代表一个单独的词条。</p><p>在响应体中，<code>token</code>是实际存储到索引中的词条，<code>position</code>是词条在原始文本中出现的位置，<code>start_offset</code>和<code>end_offset</code>则是字符在圆石字符串中出现的位置。</p><p><code>analyze</code>API是一个非常有用的工具，随着对ES了解的逐渐加深，我们会继续对它进行讨论。</p><p>还记得之前说的四种内置分析器吗，在ES中，标准分析器是默认的分析器，如果想要换一个分析器，我们就必须指定这些域的映射。</p><h3 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h3><p>为了能够让ES中存储的数据是我们想要的类型，我们需要给ES设置映射让ES知道每个域中数据的类型是什么。</p><p>ES中的简单域类型：</p><ul><li>字符串：string</li><li>整数：byte、short、integer、long</li><li>浮点数：float、double</li><li>布尔型：boolean</li><li>日期：date</li></ul><p>当我们索引一个包含新域的文档时，ES或使用动态映射，通过JSON中基本数据类型去猜测域类型，规则如下：</p><table><thead><tr><th>JSON Type</th><th>域Type</th></tr></thead><tbody><tr><td>布尔型：true或false</td><td>boolean</td></tr><tr><td>整数：123</td><td>long</td></tr><tr><td>浮点数</td><td>double</td></tr><tr><td>字符串，有效日期：2014-09-15</td><td>date</td></tr><tr><td>字符串</td><td>string</td></tr></tbody></table><p>当然，如果通过引号索引一个数字，它将被映射为string</p><h4 id="查看映射"><a href="#查看映射" class="headerlink" title="查看映射"></a>查看映射</h4><p>通过<code>/_mapping</code>，我们可以查看ES中一个过着多个索引类型的映射：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /gb/_mapping/tweet</span><br></pre></td></tr></table></figure><p>映射：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">&quot;gb&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;mappings&quot;</span>: &#123;</span><br><span class="line">         <span class="attr">&quot;tweet&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">               <span class="attr">&quot;date&quot;</span>: &#123;</span><br><span class="line">                  <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;date&quot;</span>,</span><br><span class="line">                  <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;strict_date_optional_time||epoch_millis&quot;</span></span><br><span class="line">               &#125;,</span><br><span class="line">               <span class="attr">&quot;name&quot;</span>: &#123;</span><br><span class="line">                  <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;string&quot;</span></span><br><span class="line">               &#125;,</span><br><span class="line">               <span class="attr">&quot;tweet&quot;</span>: &#123;</span><br><span class="line">                  <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;string&quot;</span></span><br><span class="line">               &#125;,</span><br><span class="line">               <span class="attr">&quot;user_id&quot;</span>: &#123;</span><br><span class="line">                  <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;long&quot;</span></span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="自定义域映射"><a href="#自定义域映射" class="headerlink" title="自定义域映射"></a>自定义域映射</h4><p>在大多数情况下，基本域数据类型已经够用了，但是我们经常要为单独域自定义映射，它允许我们进行一些操作：</p><ul><li>全文字符串和精确字符串域的区别</li><li>使用特定的语言分析器</li><li>优化域以适应部分匹配</li><li>指定自定义数据格式</li></ul><p>域最重要的属性是<code>type</code>，如果想要设置的属性不是<code>string</code>域，我们只需要</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    number_of_clicks: &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;integer&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而对于string类型，string类型会被认为包含全文。也就是说该域的值在经过索引前，会通过一个分析器，针对这个域的查询在搜索前也会经过一个分析器</p><p><code>string</code>域映射的两个最重要的属性是<code>index</code>和<code>analyzer</code></p><h5 id="index-1"><a href="#index-1" class="headerlink" title="index"></a>index</h5><p>index属性通过以下三个值来控制怎样索引字符串：</p><ul><li>analyzed：默认，首先分析字符串，然后索引它，也就是全文索引</li><li>not_analyzed：索引这个域，让他能够被搜索到，但搜索的是精确值</li><li>no：不索引这个域，这个域不会被搜索到</li></ul><p>如果我们想要索引某个字段为精确值，我们可以这样：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;tag&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;index&quot;</span>: <span class="string">&quot;not_analyzed&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="analyzer"><a href="#analyzer" class="headerlink" title="analyzer"></a>analyzer</h5><p><code>analyzer</code>可以指定在搜索和索引时使用的分析器。在ES中，默认使用的是<code>standard</code>分析器，但是我们可以更换为内置分析器，比如<code>whitespace</code>、<code>simple</code>、<code>english</code>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;tweet&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;english&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="更新映射"><a href="#更新映射" class="headerlink" title="更新映射"></a>更新映射</h4><p>当我们首次创建某个索引时，可以指定类型的映射。也可以使用<code>/_mapping</code>为新类型增加映射。</p><p><strong>注意</strong>：我们只能增加一个不存在的映射，但是不能修改存在的域映射，否则索引的数据可能会出错，以至于不能被正常搜索</p><p>接下来创建一个索引，指定<code>tweet</code>域使用<code>english</code>分析器</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">PUT /gb </span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;tweet&quot;</span> : &#123;</span><br><span class="line">      <span class="attr">&quot;properties&quot;</span> : &#123;</span><br><span class="line">        <span class="attr">&quot;tweet&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span> :    <span class="string">&quot;string&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;english&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;date&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span> :   <span class="string">&quot;date&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;name&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span> :   <span class="string">&quot;string&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;user_id&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span> :   <span class="string">&quot;long&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在<code>tweet</code>域增加一个名为<code>tag</code>的<code>not_analyzed</code>文本域</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PUT /gb/_mapping/tweet</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;properties&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;tag&quot;</span> : &#123;</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> :    <span class="string">&quot;string&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;index&quot;</span>:    <span class="string">&quot;not_analyzed&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基础入门&quot;&gt;&lt;a href=&quot;#基础入门&quot; class=&quot;headerlink&quot; title=&quot;基础入门&quot;&gt;&lt;/a&gt;基础入门&lt;/h1&gt;&lt;h2 id=&quot;一些基础概念&quot;&gt;&lt;a href=&quot;#一些基础概念&quot; class=&quot;headerlink&quot; title=&quot;一些基础概</summary>
      
    
    
    
    
    <category term="ElasticSearch" scheme="https://jiangliujl.github.io/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>《Java序列化与反序列化》</title>
    <link href="https://jiangliujl.github.io/2022/08/04/%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>https://jiangliujl.github.io/2022/08/04/%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2022-08-03T16:00:00.000Z</published>
    <updated>2022-08-04T14:32:50.841Z</updated>
    
    <content type="html"><![CDATA[<p>这是一个新的系列，每天写一点自己的想法。</p><p>突然想起来之前在面试的时候，面试官问过我这么一个问题：Java中创建类实例有哪几种方法</p><ul><li>new</li><li>Java反射的newInstance</li><li>clone</li><li>反序列化</li></ul><p>然后面试官又问我：反序列化你用过吗</p><p>我就答不上来了，只知道有这个概念，具体怎么实现还真没去看过，今天来试一试</p><h2 id="编写实体类"><a href="#编写实体类" class="headerlink" title="编写实体类"></a>编写实体类</h2><p>这里随便来写一个，但是记得实现序列化接口<code>Serializable</code>，没啥技术含量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> JiangLiu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/8/4 15:38:24</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 需要序列化的对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编写序列化类"><a href="#编写序列化类" class="headerlink" title="编写序列化类"></a>编写序列化类</h2><p>这里主要用到的就是IO流，反序列化的处理可能不是那么妥当，但是又一直报警告，明天再处理一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> JiangLiu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/8/4 15:39:56</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerializableUtil</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 序列化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serialize</span><span class="params">(T obj, String fileName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        OutputStream out = <span class="keyword">new</span> FileOutputStream(fileName);</span><br><span class="line">        ObjectOutputStream outputStream = <span class="keyword">new</span> ObjectOutputStream(out);</span><br><span class="line">        outputStream.writeObject(obj);</span><br><span class="line">        <span class="comment">// 用完记得关闭</span></span><br><span class="line">        outputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 反序列化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">deSerialize</span><span class="params">(String fileName)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        InputStream in = <span class="keyword">new</span> FileInputStream(fileName);</span><br><span class="line">        ObjectInputStream inputStream = <span class="keyword">new</span> ObjectInputStream(in);</span><br><span class="line">        Object a = <span class="keyword">null</span>;</span><br><span class="line">        a = inputStream.readObject();</span><br><span class="line">        <span class="keyword">return</span> (T) a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编写main方法"><a href="#编写main方法" class="headerlink" title="编写main方法"></a>编写main方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> JiangLiu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/8/4 15:38:06</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 造几个People</span></span><br><span class="line">        List&lt;People&gt; people = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        people.add(<span class="keyword">new</span> People(<span class="string">&quot;张三&quot;</span>, <span class="number">15</span>));</span><br><span class="line">        people.add(<span class="keyword">new</span> People(<span class="string">&quot;李四&quot;</span>, <span class="number">18</span>));</span><br><span class="line">        String fileName = <span class="string">&quot;test.txt&quot;</span>;</span><br><span class="line">        SerializableUtil&lt;List&lt;People&gt;&gt; s = <span class="keyword">new</span> SerializableUtil&lt;&gt;();</span><br><span class="line">        <span class="comment">// 对象序列化</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            s.serialize(people, fileName);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 反序列化</span></span><br><span class="line">        List&lt;People&gt; list = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            list = s.deSerialize(fileName);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[People(name=张三, age=15), People(name=李四, age=18)]</span><br></pre></td></tr></table></figure><p>完美</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这是一个新的系列，每天写一点自己的想法。&lt;/p&gt;
&lt;p&gt;突然想起来之前在面试的时候，面试官问过我这么一个问题：Java中创建类实例有哪几种方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;new&lt;/li&gt;
&lt;li&gt;Java反射的newInstance&lt;/li&gt;
&lt;li&gt;clone&lt;/li&gt;
</summary>
      
    
    
    
    
    <category term="每天写点啥" scheme="https://jiangliujl.github.io/tags/%E6%AF%8F%E5%A4%A9%E5%86%99%E7%82%B9%E5%95%A5/"/>
    
  </entry>
  
  <entry>
    <title>《Redis实现客户端缓存》</title>
    <link href="https://jiangliujl.github.io/2022/07/31/redis%E5%AE%9E%E7%8E%B0%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%BC%93%E5%AD%98/"/>
    <id>https://jiangliujl.github.io/2022/07/31/redis%E5%AE%9E%E7%8E%B0%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%BC%93%E5%AD%98/</id>
    <published>2022-07-30T16:00:00.000Z</published>
    <updated>2022-07-31T04:44:01.240Z</updated>
    
    <content type="html"><![CDATA[<p>在redis中，客户端缓存支持又被成为跟踪，有两种实现模式：</p><ul><li>在默认模式下，服务器会记住给定客户端访问的键，并且在相同的键被修改时发送无效信息。这将占用服务器端内存，但是只会为客户端内存中可能存在的一组键发送无效信息</li><li>在广播模式下，服务器不会试图记住给定客户端访问的键，因此这种模式在服务器客户端不消耗任何内存。而客户端通过订阅前缀如<code>object:</code>或<code>user:</code>，并在键匹配订阅前缀是接收通知消息</li></ul><h1 id="默认模式"><a href="#默认模式" class="headerlink" title="默认模式"></a>默认模式</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在redis中，客户端缓存支持又被成为跟踪，有两种实现模式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在默认模式下，服务器会记住给定客户端访问的键，并且在相同的键被修改时发送无效信息。这将占用服务器端内存，但是只会为客户端内存中可能存在的一组键发送无效信息&lt;/li&gt;
&lt;li&gt;在广播模式下</summary>
      
    
    
    
    
    <category term="Redis" scheme="https://jiangliujl.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>《RabbitMQ学习笔记》——读书笔记</title>
    <link href="https://jiangliujl.github.io/2022/07/27/RabbitMQ%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://jiangliujl.github.io/2022/07/27/RabbitMQ%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2022-07-26T16:00:00.000Z</published>
    <updated>2022-07-27T04:43:52.047Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是MQ"><a href="#什么是MQ" class="headerlink" title="什么是MQ"></a>什么是MQ</h1><p>MQ是<code>Message Queue</code>的简称，就是一个消息队列，队列嘛，FIFO先进先出，与普通队列的区别就是，MQ中存放的是消息，并且它是一种跨进程的通信机制，用于上下游传递消息，能够实现上下游之间的解耦</p><h1 id="MQ在SpringBoot中的配置"><a href="#MQ在SpringBoot中的配置" class="headerlink" title="MQ在SpringBoot中的配置"></a>MQ在SpringBoot中的配置</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">rabbitmq:</span></span><br><span class="line"><span class="attr">host:</span> <span class="string">//</span> <span class="string">rabbitmq的地址</span></span><br><span class="line"><span class="attr">port:</span> <span class="string">//</span> <span class="string">mq的端口</span></span><br><span class="line"><span class="attr">username:</span> <span class="string">//</span> <span class="string">mq的用户名</span></span><br><span class="line"><span class="attr">password:</span> <span class="string">//</span> <span class="string">mq的密码</span></span><br><span class="line"><span class="attr">virtual-host:</span> <span class="string">//</span> <span class="string">虚拟消息服务器</span></span><br><span class="line"><span class="attr">publisher-confirms:</span> <span class="string">//</span> <span class="string">是否开启发送确认</span></span><br><span class="line"><span class="attr">publisher-returns:</span> <span class="string">//</span> <span class="string">是否开启发送失败退回</span></span><br><span class="line"><span class="attr">template:</span></span><br><span class="line"><span class="attr">mandatory:</span> <span class="string">//</span> <span class="string">生产者是否启用强制消息</span></span><br><span class="line"><span class="attr">retry:</span></span><br><span class="line"><span class="attr">enable:</span> <span class="string">//</span> <span class="string">生产者是否开启重启</span></span><br><span class="line"><span class="attr">listener:</span></span><br><span class="line"><span class="attr">acknowledge-mode:</span> <span class="string">//</span> <span class="string">消费者ack模式</span></span><br><span class="line"><span class="attr">retry:</span></span><br><span class="line"><span class="attr">enable:</span> <span class="string">//</span> <span class="string">消费者是否重试</span></span><br><span class="line"><span class="attr">max-attempts:</span> <span class="string">//</span> <span class="string">消费者重试次数</span></span><br></pre></td></tr></table></figure><h2 id="配置详解"><a href="#配置详解" class="headerlink" title="配置详解"></a>配置详解</h2><h3 id="virtual-host"><a href="#virtual-host" class="headerlink" title="virtual-host"></a>virtual-host</h3><p><code>virtualHost</code>虚拟消息服务器，每个virtualHost相当于一个独立的MQ服务器，每个VirtualHost之间消息是隔离的，exchange、queue、message不能互通</p><h3 id="publisher-confirms"><a href="#publisher-confirms" class="headerlink" title="publisher-confirms"></a>publisher-confirms</h3><p>这个配置是为了在MQ和生产者之间的消息能够可靠传输，是MQ的扩展</p><p>生产者推送消息到消息队列后，会触发两个回调函数<code>ConfirmCallback</code>和<code>ReturnCallback</code>，从消息推送的结果来看，一共有四种组合：</p><ul><li>消息推送到server，但是在server里找不到交换机</li><li>消息推送到server，找到了交换机但是找不到队列</li><li>消息推送到server了，交换机和队列都没找到</li><li>消息推送成功</li></ul><p>生产者和消费者确认详见后文</p><h1 id="生产者和消费者确认"><a href="#生产者和消费者确认" class="headerlink" title="生产者和消费者确认"></a>生产者和消费者确认</h1><p>由于MQ的传输协议方法无法确认生产者和消费者是否成功发布或者消费信息，所以生产者和消费者都需要一种传递和处理确认的机制</p><h2 id="消费者确认"><a href="#消费者确认" class="headerlink" title="消费者确认"></a>消费者确认</h2><h3 id="自动ACK"><a href="#自动ACK" class="headerlink" title="自动ACK"></a>自动ACK</h3><p>在MQ中有一种自动确认模式机制，消息发送成功后立即被视为传递成功，这种模式以更高的吞吐量来降低交付和消费者处理的安全性为代价，如果消费者的TCP连接或通道在消息发送成功之前关闭，那么消息就会丢失，所以这种方法被视为是不安全的。</p><p>在这个模式中，当方法没有异常执行完毕后，会对MQ发出ACK，若方法出现异常，会对MQ发出nack，消息重回队列。</p><h3 id="手动ACK"><a href="#手动ACK" class="headerlink" title="手动ACK"></a>手动ACK</h3><p>常用API：</p><ul><li>channel.basicAck(msg.getMessageProperties().getDeliveryTag(), false/true)<ul><li>消息确认，第一个参数是队列名称，第二个参数是multiple<ul><li>multiple：是否一次性ack所有deleveryTag的消息</li></ul></li></ul></li><li>channel.basicReject(deleveryTag, requeue)<ul><li>拒绝消息<ul><li>requeue：bool类型，false表示将这条消息丢弃，true表示消息重回队列</li></ul></li></ul></li><li>channel.basicNack(deliveryTag, multiple, requeue)<ul><li>拒绝消息<ul><li>deliveryTag：队列名称</li><li>multiple：是否拒绝deliveryTag的所有消息</li><li>requeue：是否返回队列</li></ul></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;什么是MQ&quot;&gt;&lt;a href=&quot;#什么是MQ&quot; class=&quot;headerlink&quot; title=&quot;什么是MQ&quot;&gt;&lt;/a&gt;什么是MQ&lt;/h1&gt;&lt;p&gt;MQ是&lt;code&gt;Message Queue&lt;/code&gt;的简称，就是一个消息队列，队列嘛，FIFO先进先出，与普通</summary>
      
    
    
    
    
    <category term="读书笔记" scheme="https://jiangliujl.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    <category term="SpringBoot" scheme="https://jiangliujl.github.io/tags/SpringBoot/"/>
    
    <category term="RabbitMQ" scheme="https://jiangliujl.github.io/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>《Java流中的generate与iterator》——读书笔记</title>
    <link href="https://jiangliujl.github.io/2022/07/26/stream%E4%B8%AD%E7%9A%84generate%E4%B8%8Eiterator/"/>
    <id>https://jiangliujl.github.io/2022/07/26/stream%E4%B8%AD%E7%9A%84generate%E4%B8%8Eiterator/</id>
    <published>2022-07-25T16:00:00.000Z</published>
    <updated>2022-07-26T14:54:20.632Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java流中的generate与iterator"><a href="#Java流中的generate与iterator" class="headerlink" title="Java流中的generate与iterator"></a>Java流中的generate与iterator</h1><p>在Java流中，有两个创建无限流的方法：</p><ul><li>stream().generate()</li><li>stream().iterator()</li></ul><h2 id="iterator"><a href="#iterator" class="headerlink" title="iterator"></a>iterator</h2><p>从源码中给的解释来看</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Returns an infinite sequential ordered Stream produced by iterative application of a function f to an initial element seed, producing a Stream consisting of seed, f(seed), f(f(seed)), etc.</span><br><span class="line">The first element (position 0) in the Stream will be the provided seed. For n &gt; 0, the element at position n, will be the result of applying the function f to the element at position n - 1.</span><br><span class="line">The action of applying f for one element happens-before the action of applying f for subsequent elements. For any given element the action may be performed in whatever thread the library chooses.</span><br><span class="line">形参:</span><br><span class="line">seed – the initial element f – a function to be applied to the previous element to produce a new element</span><br><span class="line">返回值:</span><br><span class="line">a new sequential Stream</span><br></pre></td></tr></table></figure><p>iterator创建的无限流是根据<code>seed</code>与<code>initial element seed</code>来创建的，简单来说就是一个起始元素seed，一个创建的规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;BigInteger&gt; stream = Stream.iterate(BigInteger.ZERO, n -&gt; n.add(BigInteger.ONE)).limit(<span class="number">10</span>);</span><br><span class="line">        System.out.println(Arrays.toString(stream.filter(n -&gt; n.compareTo(<span class="keyword">new</span> BigInteger(String.valueOf(<span class="number">1794952398L</span>))) &lt; <span class="number">0</span>).toArray()));</span><br></pre></td></tr></table></figure><p>这里用limit来限制一下产生的无限流，否则无法正常输出</p><h2 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h2><p>同样还是来看源码中给的解释</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Returns an infinite sequential unordered stream where each element is generated by the provided Supplier. This is suitable for generating constant streams, streams of random elements, etc.</span><br><span class="line">形参:</span><br><span class="line">s – the Supplier of generated elements</span><br><span class="line">返回值:</span><br><span class="line">a new infinite sequential unordered Stream</span><br></pre></td></tr></table></figure><p>对于generate来说，只提供给我们一个参数<code>Supplier</code>，翻译过来叫 供应商，里面存放着产生供应流的规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;Integer&gt; stream1 = Stream.generate(<span class="keyword">new</span> Supplier&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Integer <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> a++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).limit(<span class="number">20</span>);</span><br><span class="line">        System.out.println(Arrays.toString(stream1.toArray()));</span><br></pre></td></tr></table></figure><p>这里同样用limit限制一下</p><p>至于具体的使用场景，后续会继续更新</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java流中的generate与iterator&quot;&gt;&lt;a href=&quot;#Java流中的generate与iterator&quot; class=&quot;headerlink&quot; title=&quot;Java流中的generate与iterator&quot;&gt;&lt;/a&gt;Java流中的generat</summary>
      
    
    
    
    
    <category term="Java" scheme="https://jiangliujl.github.io/tags/Java/"/>
    
    <category term="Java流" scheme="https://jiangliujl.github.io/tags/Java%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>《MyBatis 和 MyBatis Plus冲突问题》——解决模块</title>
    <link href="https://jiangliujl.github.io/2022/07/25/mybatisplus%E5%92%8Cmybatis%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98/"/>
    <id>https://jiangliujl.github.io/2022/07/25/mybatisplus%E5%92%8Cmybatis%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98/</id>
    <published>2022-07-24T16:00:00.000Z</published>
    <updated>2022-07-25T04:45:02.722Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>在工作的时候，遇到了一个奇怪的问题，使用 MyBatis Plus 的IService模板中的list对数据库进行操作时，报了个<code>Invalid bound statement (not found)</code></p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>搜了半天，主要是以下几个问题：</p><ul><li>xml 的 namespace 不正确</li><li>Mapper.java 中的方法在 Mapper.xml 中不存在</li><li>xml 返回类型配置错误</li><li>没有构建成功</li></ul><p>但是这些问题都检查了，没问题，用 Maven Helper 查看了一下依赖冲突，看到项目中同时引入了mybatis和mybatisplus，具体冲突的包有三个：</p><ul><li>mapper-spring-boot-starter</li><li>mybatis-spring-boot-starter</li><li>mybatis-plus-extension</li></ul><p>首先，<code>mybatis-spring-boot-starter</code>包是用来连接mybatis和springboot的中间件，这个 mybatis-plus-boot-starter能够代替，冲突了，去掉</p><p>然后是 <code>mapper-spring-boot-starter</code>包，这个包是用来导入公共mapper模板的，具体作用暂时不知道，但是不去掉也不能运行</p><p>最后是<code>mybatis-plus-extension</code>，这个东西具体作用没查到，只知道他是mybatisplus的扩展插件，但是去掉之后service层的函数全都无法调用了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;p&gt;在工作的时候，遇到了一个奇怪的问题，使用 MyBatis Plus 的IService模板中的list对数据库进行操作时，报了个&lt;code&gt;</summary>
      
    
    
    
    
    <category term="MyBatis Plus" scheme="https://jiangliujl.github.io/tags/MyBatis-Plus/"/>
    
    <category term="SpringBoot" scheme="https://jiangliujl.github.io/tags/SpringBoot/"/>
    
    <category term="问题解决" scheme="https://jiangliujl.github.io/tags/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    
  </entry>
  
  <entry>
    <title>《Java常用注解》</title>
    <link href="https://jiangliujl.github.io/2022/07/15/java%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/"/>
    <id>https://jiangliujl.github.io/2022/07/15/java%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/</id>
    <published>2022-07-14T16:00:00.000Z</published>
    <updated>2022-07-24T08:18:35.379Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PostConstruct"><a href="#PostConstruct" class="headerlink" title="@PostConstruct"></a>@PostConstruct</h1><p>从Java EE 5 之后，Servlet增加了两个影响Servlet生命周期的注解：</p><ul><li>@PostConstruct</li><li>@PreConstruct</li></ul><h2 id="PostConstruct-1"><a href="#PostConstruct-1" class="headerlink" title="@PostConstruct"></a>@PostConstruct</h2><p>被这个注解修饰的方法会在服务器加载Servlet的时候运行，并且只会被服务器调用一次，被PostConstruct修饰的方法会在构造函数之后，init之前运行</p><h2 id="PreConstruct"><a href="#PreConstruct" class="headerlink" title="@PreConstruct"></a>@PreConstruct</h2><p>被这个注解修饰的方法会在服务器卸载Servlet的时候运行，并且只会调用一次，类似于destroy</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;PostConstruct&quot;&gt;&lt;a href=&quot;#PostConstruct&quot; class=&quot;headerlink&quot; title=&quot;@PostConstruct&quot;&gt;&lt;/a&gt;@PostConstruct&lt;/h1&gt;&lt;p&gt;从Java EE 5 之后，Servlet增加了</summary>
      
    
    
    
    
    <category term="Java" scheme="https://jiangliujl.github.io/tags/Java/"/>
    
    <category term="注解" scheme="https://jiangliujl.github.io/tags/%E6%B3%A8%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>《lambda表达式的语法》——读书笔记</title>
    <link href="https://jiangliujl.github.io/2022/07/15/lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://jiangliujl.github.io/2022/07/15/lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2022-07-14T16:00:00.000Z</published>
    <updated>2022-07-24T08:15:27.345Z</updated>
    
    <content type="html"><![CDATA[<h1 id="lambda表达式的语法"><a href="#lambda表达式的语法" class="headerlink" title="lambda表达式的语法"></a>lambda表达式的语法</h1><p>了解过javax.swing.Timer函数和Comparator比较器的可以发现，这两个例子有一些共同点，都是将某一段代码块传到某个对象，如果可以直接传入一段代码块，那代码会变得非常简洁，但是Java并不支持这种方法，因为这会让Java语言变得一团糟</p><p>在 java 8 后，加入了lambda表达式，这是一个可传递的代码块,可以让某个接口不写实现类而直接使用</p><p>new Timer中需要传入一个ActionListener接口，实际上只是调用这个接口中的actionPerformed函数，Comparator也是同理</p><p>案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">lambdaTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] a = <span class="keyword">new</span> String[]&#123; <span class="string">&quot;Mercury&quot;</span> , <span class="string">&quot;Venus&quot;</span> , <span class="string">&quot;Earth&quot;</span> , <span class="string">&quot;Mars&quot;</span> ,</span><br><span class="line">                <span class="string">&quot;Jupiter&quot;</span> , <span class="string">&quot;Saturn&quot;</span> , <span class="string">&quot;Uranus&quot;</span> , <span class="string">&quot;Neptune&quot;</span>&#125;;</span><br><span class="line">        Arrays.sort(a, (left, right) -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> left.length() - right.length();</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(a);</span><br><span class="line"></span><br><span class="line">        Timer t = <span class="keyword">new</span> Timer(<span class="number">100</span>, event -&gt;&#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> Date());</span><br><span class="line">        &#125;);</span><br><span class="line">        t.start();</span><br><span class="line">        JOptionPane.showMessageDialog(<span class="keyword">null</span>, <span class="string">&quot;Quit&quot;</span>);</span><br><span class="line">        System.exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h1><p>Java中已经有了很多封装代码块地接口，如AactionListener、Comparator，lambda与这些接口是兼容的</p><p>对于只有一个抽象方法的接口，需要用到这种接口的对象时，可以使用lambda表达式，这种接口成为函数式接口</p><ul><li>为什么Comparator接口也能成为函数式接口，明明有compare、equals两个抽象函数<ul><li>对于接口重写Object的公共方法是不算入函数式接口中的，也就是说Comparator只有compare一个非公共抽象函数</li></ul></li></ul><p>以Arrays.sort为例，在底层，sort方法会接收Comparator的某个类的对象，在这个对象上再调用compare方法执行lambda表达式的方法体。</p><p>lambda表达式可以转换成接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Timer t = <span class="keyword">new</span> Timer(<span class="number">100</span>, event -&gt;&#123;</span><br><span class="line">    System.out.println(<span class="keyword">new</span> Date());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>与原来的写法相比，这个可读性要高得多</p><p>实际上在Java中 lambda 表达式的作用非常有限，也只能转换为函数式接口，在其他语言中，可以声明函数类型、声明这些类型的变量，还可以使用变量保存函数表达式。</p><h1 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h1><p>有时候我们希望可已经有现成的方法可以完成你想要传递到其他代码的某个动作，比如希望定时器事件打印这个事件对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Timer t = <span class="keyword">new</span> Timer(<span class="number">1000</span>, event -&gt; System.out.println(event)):</span><br></pre></td></tr></table></figure><p>但是入股哟能直接把print方法传递到Timer构造器就更简洁了，lambda</p><p>表达式也能够做到</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Timer t = <span class="keyword">new</span> Timer(<span class="number">100</span>, System.out::println);</span><br></pre></td></tr></table></figure><p><img src="/img/image-20220720173122252.png" alt="image-20220720173122252"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;lambda表达式的语法&quot;&gt;&lt;a href=&quot;#lambda表达式的语法&quot; class=&quot;headerlink&quot; title=&quot;lambda表达式的语法&quot;&gt;&lt;/a&gt;lambda表达式的语法&lt;/h1&gt;&lt;p&gt;了解过javax.swing.Timer函数和Compara</summary>
      
    
    
    
    
    <category term="Java" scheme="https://jiangliujl.github.io/tags/Java/"/>
    
    <category term="读书笔记" scheme="https://jiangliujl.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>《MybatisPlus 常用注解》</title>
    <link href="https://jiangliujl.github.io/2022/07/15/mybatisplus%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/"/>
    <id>https://jiangliujl.github.io/2022/07/15/mybatisplus%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/</id>
    <published>2022-07-14T16:00:00.000Z</published>
    <updated>2022-07-24T08:18:49.322Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TableName"><a href="#TableName" class="headerlink" title="@TableName"></a>@TableName</h1><p>用法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableName(&quot;sys_user&quot;)</span></span><br></pre></td></tr></table></figure><p>描述：表名注解，标识实体类对应表</p><p>使用位置：实体类类注解</p><p>属性：</p><ul><li>value：表名</li><li>schema：用来指定模式名称，如果使用的是mysql，则指定数据库名称，如果使用oracle，则为schema</li><li>keepGlobalPrefix：是否保持使用全局的tablePrefix的值</li><li>resultMap：xml中resultMap的id</li><li>autoResultMap：是否自动构建ResultMap</li><li>excludeProperty：需要排除的属性名</li></ul><h1 id="TableId"><a href="#TableId" class="headerlink" title="@TableId"></a>@TableId</h1><p>用法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableName(&quot;sys_user&quot;)</span></span><br></pre></td></tr></table></figure><p> 描述：主键属性</p><p>使用位置：实体类主键字段</p><p>属性：</p><ul><li>value：主键字段名</li><li>type：指定主键类型</li></ul><h2 id="Type属性值"><a href="#Type属性值" class="headerlink" title="Type属性值"></a>Type属性值</h2><ul><li>AUTO：数据库ID自增</li><li>NONE：无状态，未设置主键类型（跟随全局，全局默认为INPUT）</li><li>INPUT：insert前自行设置</li><li>ASSIGN_ID：分配ID，使用接口<code>IdentifierGenerator</code>的<code>nextId</code>，实现类默认为雪花算法</li><li>ASSIGN_UUID：分配UUID</li></ul><h2 id="TableField"><a href="#TableField" class="headerlink" title="@TableField"></a>@TableField</h2><p>用法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableName(&quot;sys_user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="meta">@TableField(&quot;nickname&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>描述：字段注解（非主键）</p><p>属性：</p><ul><li>value：数据库字段名</li><li>exist：是否为数据库字段</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;TableName&quot;&gt;&lt;a href=&quot;#TableName&quot; class=&quot;headerlink&quot; title=&quot;@TableName&quot;&gt;&lt;/a&gt;@TableName&lt;/h1&gt;&lt;p&gt;用法&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;t</summary>
      
    
    
    
    
    <category term="注解" scheme="https://jiangliujl.github.io/tags/%E6%B3%A8%E8%A7%A3/"/>
    
    <category term="Mybatis Plus" scheme="https://jiangliujl.github.io/tags/Mybatis-Plus/"/>
    
  </entry>
  
  <entry>
    <title>《事务传播行为》</title>
    <link href="https://jiangliujl.github.io/2022/07/15/%E4%BA%8B%E5%8A%A1%E4%BC%A0%E6%92%AD%E8%A1%8C%E4%B8%BA/"/>
    <id>https://jiangliujl.github.io/2022/07/15/%E4%BA%8B%E5%8A%A1%E4%BC%A0%E6%92%AD%E8%A1%8C%E4%B8%BA/</id>
    <published>2022-07-14T16:00:00.000Z</published>
    <updated>2022-07-24T08:43:36.116Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是事务传播行为"><a href="#什么是事务传播行为" class="headerlink" title="什么是事务传播行为"></a>什么是事务传播行为</h1><p>我们在Spring中使用事务时，经常会在一个事务中调用另外一个事务，这种事务嵌套的控制方式就是事务传播行为</p><h1 id="事务传播行为的七种方式"><a href="#事务传播行为的七种方式" class="headerlink" title="事务传播行为的七种方式"></a>事务传播行为的七种方式</h1><ul><li>propagation_required<ul><li>事务传播的默认形式，如果当前没有事务，就新建一个事务，如果已经存在事务，就加入到这个事务中</li></ul></li><li>propagation_supports<ul><li>支持当前事务，如果当前没有事务，就以非事务方式执行</li></ul></li><li>propagation_mandatory<ul><li>使用当前事务，如果当前没有事务，就抛出异常</li></ul></li><li>propagation_requires_new<ul><li>新建事务，如果当前存在事务，就把当前事务挂起</li></ul></li><li>propagation_not_supported<ul><li>以非事务方式执行操作，如果当前存在事务，就把当前事务挂起</li></ul></li><li>propagation_never<ul><li>以非事务方式执行，如果当前存在事务，就抛出异常</li></ul></li><li>propagation_nested<ul><li>如果当前存在事务，则在嵌套事务内执行，如果当前没有事务，则执行propagation_required类似的操作</li></ul></li></ul><p>总结</p><p>如果事务嵌套，子事务回滚，如果子事务没有将父事务挂起，父事务也会回滚，不管父事务中是否有对子事务进行异常捕获</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;什么是事务传播行为&quot;&gt;&lt;a href=&quot;#什么是事务传播行为&quot; class=&quot;headerlink&quot; title=&quot;什么是事务传播行为&quot;&gt;&lt;/a&gt;什么是事务传播行为&lt;/h1&gt;&lt;p&gt;我们在Spring中使用事务时，经常会在一个事务中调用另外一个事务，这种事务嵌套的控</summary>
      
    
    
    
    
    <category term="SpringBoot" scheme="https://jiangliujl.github.io/tags/SpringBoot/"/>
    
    <category term="事务" scheme="https://jiangliujl.github.io/tags/%E4%BA%8B%E5%8A%A1/"/>
    
    <category term="MySQL" scheme="https://jiangliujl.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>《事务失效》</title>
    <link href="https://jiangliujl.github.io/2022/07/15/%E4%BA%8B%E5%8A%A1%E5%A4%B1%E6%95%88%E7%9A%84%E5%87%A0%E7%A7%8D%E6%83%85%E5%86%B5%E4%B8%8E%E5%8E%9F%E5%9B%A0/"/>
    <id>https://jiangliujl.github.io/2022/07/15/%E4%BA%8B%E5%8A%A1%E5%A4%B1%E6%95%88%E7%9A%84%E5%87%A0%E7%A7%8D%E6%83%85%E5%86%B5%E4%B8%8E%E5%8E%9F%E5%9B%A0/</id>
    <published>2022-07-14T16:00:00.000Z</published>
    <updated>2022-07-24T08:47:07.815Z</updated>
    
    <content type="html"><![CDATA[<h1 id="事务失效的几种情况与原因"><a href="#事务失效的几种情况与原因" class="headerlink" title="事务失效的几种情况与原因"></a>事务失效的几种情况与原因</h1><ul><li>service没有托管给spring</li><li>抛出受检异常</li><li>业务自己捕获了异常</li><li>切面顺序导致</li><li>非public方法</li><li>父子容器</li><li>方法被final修饰</li><li>方法被static修饰</li><li>调用本类方法</li><li>多线程调用</li><li>错误的传播行为</li><li>使用了不支持事务的存储引擎</li><li>数据源没有配置事务管理器</li><li>被代理的类过早实例化</li></ul><h2 id="service没有托管给spring"><a href="#service没有托管给spring" class="headerlink" title="service没有托管给spring"></a>service没有托管给spring</h2><p>事务的前提是service必须是一个bean对象</p><h2 id="抛出受检异常"><a href="#抛出受检异常" class="headerlink" title="抛出受检异常"></a>抛出受检异常</h2><p>spring默认回滚的是runtimeException，如果要触发其他异常的回滚，可以通过rollbackFor进行配置</p><h2 id="业务自己捕获了异常"><a href="#业务自己捕获了异常" class="headerlink" title="业务自己捕获了异常"></a>业务自己捕获了异常</h2><p>spring只有捕捉到了业务抛出的异常时，才会进行后续处理，如果业务自己捕获了异常并进行处理，事务无法感知</p><h2 id="切面顺序导致"><a href="#切面顺序导致" class="headerlink" title="切面顺序导致"></a>切面顺序导致</h2><p><img src="/img/image-20220713172742115.png" alt="image-20220713172742115"></p><p>因为spring事务本质上也是一个切面，自定义切面捕捉到了异常但是没有往外抛出，事务切面捕获不到异常</p><h2 id="非public方法"><a href="#非public方法" class="headerlink" title="非public方法"></a>非public方法</h2><p>spring事务默认生效的方法权限都必须为public</p><p>解决办法：</p><ul><li>修改方法为public</li><li>修改TransactionAttributeSource，将publicMethodsOnly修改为false</li><li>开启AspectJ代理</li></ul><h2 id="父子容器"><a href="#父子容器" class="headerlink" title="父子容器"></a>父子容器</h2><p>原因：子容器扫描范围过大，将未加事务配置的service扫描进来</p><p>这个一般用于spring整合springmvc中，springboot没有父子容器</p><h2 id="方法用final修饰"><a href="#方法用final修饰" class="headerlink" title="方法用final修饰"></a>方法用final修饰</h2><p>spring事务是用动态代理实现的，如果方法使用了final修饰，代理类无法对目标类进行重写，就无法实现事务</p><h2 id="方法用static修饰"><a href="#方法用static修饰" class="headerlink" title="方法用static修饰"></a>方法用static修饰</h2><p>原因和final一样</p><h2 id="调用本类方法"><a href="#调用本类方法" class="headerlink" title="调用本类方法"></a>调用本类方法</h2><p>调用本类方法不经过代理，就无法进行增强</p><h2 id="多线程调用"><a href="#多线程调用" class="headerlink" title="多线程调用"></a>多线程调用</h2><p>原因：spring的事务是通过数据库连接来实现的，而数据库连接spring是放在threadLocal里面的，同一个事务只能用同一个数据库连接。而多线程场景下，拿到的数据库连接不同，即属于不同事务</p><h2 id="错误的传播行为"><a href="#错误的传播行为" class="headerlink" title="错误的传播行为"></a>错误的传播行为</h2><p>详情看  事务传播行为</p><h2 id="使用了不支持事务的存储引擎"><a href="#使用了不支持事务的存储引擎" class="headerlink" title="使用了不支持事务的存储引擎"></a>使用了不支持事务的存储引擎</h2><p>比如mysql中的MyISAM就不支持事务</p><h2 id="数据源没有配置事务管理器"><a href="#数据源没有配置事务管理器" class="headerlink" title="数据源没有配置事务管理器"></a>数据源没有配置事务管理器</h2><p>springboot中默认开启事务管理器</p><h2 id="被代理的类被过早实例化"><a href="#被代理的类被过早实例化" class="headerlink" title="被代理的类被过早实例化"></a>被代理的类被过早实例化</h2><p>具体应该要看源码</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;事务失效的几种情况与原因&quot;&gt;&lt;a href=&quot;#事务失效的几种情况与原因&quot; class=&quot;headerlink&quot; title=&quot;事务失效的几种情况与原因&quot;&gt;&lt;/a&gt;事务失效的几种情况与原因&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;service没有托管给spring&lt;/li&gt;
</summary>
      
    
    
    
    
    <category term="SpringBoot" scheme="https://jiangliujl.github.io/tags/SpringBoot/"/>
    
    <category term="事务" scheme="https://jiangliujl.github.io/tags/%E4%BA%8B%E5%8A%A1/"/>
    
    <category term="MySQL" scheme="https://jiangliujl.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>《常用类与接口》</title>
    <link href="https://jiangliujl.github.io/2022/07/15/%E5%B8%B8%E7%94%A8%E7%B1%BB%E4%B8%8E%E6%8E%A5%E5%8F%A3/"/>
    <id>https://jiangliujl.github.io/2022/07/15/%E5%B8%B8%E7%94%A8%E7%B1%BB%E4%B8%8E%E6%8E%A5%E5%8F%A3/</id>
    <published>2022-07-14T16:00:00.000Z</published>
    <updated>2022-07-24T08:46:35.502Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Comparator接口"><a href="#Comparator接口" class="headerlink" title="Comparator接口"></a>Comparator接口</h1><p>遇到的问题：在开发中需要对一个含有实体类的泛型数组进行排序</p><p>comparator接口可以实现这个功能</p><p>简单用法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Collections_</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        list.add(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;smith&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;king&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;king&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;king&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;milan&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Collections.sort(list, <span class="keyword">new</span> Comparator() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Object o1, Object o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (o1 <span class="keyword">instanceof</span> String &amp;&amp; o2 <span class="keyword">instanceof</span> String)&#123;</span><br><span class="line">                    <span class="keyword">return</span> (((String) o1).length() - ((String) o2).length());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Cloneable接口"><a href="#Cloneable接口" class="headerlink" title="Cloneable接口"></a>Cloneable接口</h1><p>克隆接口，这个接口中提供了一个安全的clone方法</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Comparator接口&quot;&gt;&lt;a href=&quot;#Comparator接口&quot; class=&quot;headerlink&quot; title=&quot;Comparator接口&quot;&gt;&lt;/a&gt;Comparator接口&lt;/h1&gt;&lt;p&gt;遇到的问题：在开发中需要对一个含有实体类的泛型数组进行排序&lt;</summary>
      
    
    
    
    
    <category term="Java" scheme="https://jiangliujl.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>《SpringBoot常用注解》</title>
    <link href="https://jiangliujl.github.io/2022/07/15/SpringBoot%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/"/>
    <id>https://jiangliujl.github.io/2022/07/15/SpringBoot%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/</id>
    <published>2022-07-14T16:00:00.000Z</published>
    <updated>2022-08-03T08:39:17.129Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Springboot常用注解"><a href="#Springboot常用注解" class="headerlink" title="Springboot常用注解"></a>Springboot常用注解</h1><ul><li>Value：属性赋值</li><li>Component：与业务层、dao层、控制层不相关的类需要在spring容器中创建使用</li><li>Mapper：注解当前类为mapper类</li><li>MapperScan：如果想要每个接口都变成实现类，那么需要在每个接口上添加Mapper注解，比较麻烦，可以使用MapperScan进行扫描</li><li>Service：表示当前层为Service层</li><li>Controller：控制层对象的创建</li><li>RestController：Controller与ResponseBody的结合，让当前类下web请求返回数据而不是视图</li><li>Autowired：根据类型自动注入</li><li>Resouce：根据名称自动注入</li></ul><h2 id="SpringBootApplication注解"><a href="#SpringBootApplication注解" class="headerlink" title="@SpringBootApplication注解"></a>@SpringBootApplication注解</h2><p>这个注解包含了三个注解，分别是：</p><p>@SpringBootConfiguration：自动扫描添加了@Configuration注解的类，读取其中的配置信息</p><p>@EnableAutoConfiguration：开启自动配置告诉Springboot基于所添加的依赖去猜测你想要如何配置spring，比如说我们引入了spring-boot-starter-web，而这个启动器中帮我们添加了tomcat、SpringMVC的依赖，此时自动配置就只要你是要开发一个web应用，就会帮我们去完成web以及springMVC的默认配置。</p><p>@ComponentScan：配置组件扫描</p><h2 id="Transaction"><a href="#Transaction" class="headerlink" title="@Transaction"></a>@Transaction</h2><p>事务注解</p><h3 id="失效场景"><a href="#失效场景" class="headerlink" title="失效场景"></a>失效场景</h3><p>具体看我的另一篇博客——《事务失效》</p><h2 id="EnableScheduling"><a href="#EnableScheduling" class="headerlink" title="@EnableScheduling"></a>@EnableScheduling</h2><p>开启定时任务，配合@Schedule注解使用，使这个注解功能可用</p><h2 id="Bean"><a href="#Bean" class="headerlink" title="@Bean"></a>@Bean</h2><p>告诉方法产生一个bean对象，然后将这个bean交给spring进行管理，在产生bean的时候这个方法会调用一次，然后将产生的bean对象放入spring容器中</p><h2 id="PostConstruct"><a href="#PostConstruct" class="headerlink" title="@PostConstruct"></a>@PostConstruct</h2><p>在spring中，有一个接口叫<code>InitializationBean</code>，这个接口允许bean在合适的时机通过设置注解的初始化属性从而调用初始化方法，并且在这个接口中有一个定义好的初始化方法<code>afterPropertiesSet</code></p><p><strong>但是</strong>，spring并不推荐使用这种方法来调用初始化，它会将不必要的代码耦合到spring</p><p>相比于<code>InitializationBean</code>，spring更推荐我们使用<code>@PostConstruct</code>注解</p><p>至于为什么推荐使用<code>@PostConstruct</code>：</p><ul><li>InitializationBean是直接执行方法来进行初始化的，会耦合进Spring项目</li><li>@PostConstruct注解是通过反射机制来初始化的</li></ul><h2 id="ConfigurationProperties"><a href="#ConfigurationProperties" class="headerlink" title="@ConfigurationProperties"></a>@ConfigurationProperties</h2><p>在SpringBoot中，如果我们想要获取到配置文件中某个属性的值，有两个方法：</p><ul><li>@Value</li><li>@ConfigurationProperties</li></ul><p>这里我们只介绍第二个</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">config:</span></span><br><span class="line"><span class="attr">username:</span> <span class="string">JiangLiu</span></span><br><span class="line"><span class="attr">password:</span> <span class="number">123</span></span><br></pre></td></tr></table></figure><p>如果我们想要获取username，只需要这样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;config&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBean</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Qualifier"><a href="#Qualifier" class="headerlink" title="@Qualifier"></a>@Qualifier</h2><p><code>@Autowired</code>注解可以帮助我们进行spring依赖注入，但是很多场景下只用这个注解，spring并不知道我们需要注入哪个bean，比如B、C两个类同时继承A接口，这时我们注入A，spring就会抛出<code>NoUniqueBeanDefinitionException</code>异常，这时就需要使用@Qualifier注解</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Springboot常用注解&quot;&gt;&lt;a href=&quot;#Springboot常用注解&quot; class=&quot;headerlink&quot; title=&quot;Springboot常用注解&quot;&gt;&lt;/a&gt;Springboot常用注解&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Value：属性赋值&lt;/li&gt;
</summary>
      
    
    
    
    
    <category term="注解" scheme="https://jiangliujl.github.io/tags/%E6%B3%A8%E8%A7%A3/"/>
    
    <category term="SpringBoot" scheme="https://jiangliujl.github.io/tags/SpringBoot/"/>
    
  </entry>
  
</feed>
